// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ortools/constraint_solver/solver_parameters.proto

package gen

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//
// Internal parameters of the solver.
//
type ConstraintSolverParameters_TrailCompression int32

const (
	ConstraintSolverParameters_NO_COMPRESSION     ConstraintSolverParameters_TrailCompression = 0
	ConstraintSolverParameters_COMPRESS_WITH_ZLIB ConstraintSolverParameters_TrailCompression = 1
)

var ConstraintSolverParameters_TrailCompression_name = map[int32]string{
	0: "NO_COMPRESSION",
	1: "COMPRESS_WITH_ZLIB",
}

var ConstraintSolverParameters_TrailCompression_value = map[string]int32{
	"NO_COMPRESSION":     0,
	"COMPRESS_WITH_ZLIB": 1,
}

func (x ConstraintSolverParameters_TrailCompression) String() string {
	return proto.EnumName(ConstraintSolverParameters_TrailCompression_name, int32(x))
}

func (ConstraintSolverParameters_TrailCompression) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_98a0e34014f3381e, []int{0, 0}
}

// Solver parameters.
type ConstraintSolverParameters struct {
	// This parameter indicates if the solver should compress the trail
	// during the search. No compression means that the solver will be faster,
	// but will use more memory.
	CompressTrail ConstraintSolverParameters_TrailCompression `protobuf:"varint,1,opt,name=compress_trail,json=compressTrail,proto3,enum=operations_research.ConstraintSolverParameters_TrailCompression" json:"compress_trail,omitempty"`
	// This parameter indicates the default size of a block of the trail.
	// Compression applies at the block level.
	TrailBlockSize int32 `protobuf:"varint,2,opt,name=trail_block_size,json=trailBlockSize,proto3" json:"trail_block_size,omitempty"`
	// When a sum/min/max operation is applied on a large array, this
	// array is recursively split into blocks of size 'array_split_size'.
	ArraySplitSize int32 `protobuf:"varint,3,opt,name=array_split_size,json=arraySplitSize,proto3" json:"array_split_size,omitempty"`
	// This parameters indicates if the solver should store the names of
	// the objets it manages.
	StoreNames bool `protobuf:"varint,4,opt,name=store_names,json=storeNames,proto3" json:"store_names,omitempty"`
	// Create names for cast variables.
	NameCastVariables bool `protobuf:"varint,5,opt,name=name_cast_variables,json=nameCastVariables,proto3" json:"name_cast_variables,omitempty"`
	// Should anonymous variables be given a name.
	NameAllVariables bool `protobuf:"varint,6,opt,name=name_all_variables,json=nameAllVariables,proto3" json:"name_all_variables,omitempty"`
	// Activate propagation profiling.
	ProfilePropagation bool `protobuf:"varint,7,opt,name=profile_propagation,json=profilePropagation,proto3" json:"profile_propagation,omitempty"`
	// Export propagation profiling data to file.
	ProfileFile string `protobuf:"bytes,8,opt,name=profile_file,json=profileFile,proto3" json:"profile_file,omitempty"`
	// Activate local search profiling.
	ProfileLocalSearch bool `protobuf:"varint,16,opt,name=profile_local_search,json=profileLocalSearch,proto3" json:"profile_local_search,omitempty"`
	// Print local search profiling data after solving.
	PrintLocalSearchProfile bool `protobuf:"varint,17,opt,name=print_local_search_profile,json=printLocalSearchProfile,proto3" json:"print_local_search_profile,omitempty"`
	// Activate propagate tracing.
	TracePropagation bool `protobuf:"varint,9,opt,name=trace_propagation,json=tracePropagation,proto3" json:"trace_propagation,omitempty"`
	// Trace search.
	TraceSearch bool `protobuf:"varint,10,opt,name=trace_search,json=traceSearch,proto3" json:"trace_search,omitempty"`
	// Print the model before solving.
	PrintModel bool `protobuf:"varint,11,opt,name=print_model,json=printModel,proto3" json:"print_model,omitempty"`
	// Print model statistics before solving.
	PrintModelStats bool `protobuf:"varint,12,opt,name=print_model_stats,json=printModelStats,proto3" json:"print_model_stats,omitempty"`
	// Print added constraints.
	PrintAddedConstraints bool `protobuf:"varint,13,opt,name=print_added_constraints,json=printAddedConstraints,proto3" json:"print_added_constraints,omitempty"`
	DisableSolve          bool `protobuf:"varint,15,opt,name=disable_solve,json=disableSolve,proto3" json:"disable_solve,omitempty"`
	//
	// Control the implementation of the table constraint.
	//
	UseSmallTable bool `protobuf:"varint,101,opt,name=use_small_table,json=useSmallTable,proto3" json:"use_small_table,omitempty"`
	//
	// Control the propagation of the cumulative constraint.
	//
	UseCumulativeEdgeFinder    bool  `protobuf:"varint,105,opt,name=use_cumulative_edge_finder,json=useCumulativeEdgeFinder,proto3" json:"use_cumulative_edge_finder,omitempty"`
	UseCumulativeTimeTable     bool  `protobuf:"varint,106,opt,name=use_cumulative_time_table,json=useCumulativeTimeTable,proto3" json:"use_cumulative_time_table,omitempty"`
	UseCumulativeTimeTableSync bool  `protobuf:"varint,112,opt,name=use_cumulative_time_table_sync,json=useCumulativeTimeTableSync,proto3" json:"use_cumulative_time_table_sync,omitempty"`
	UseSequenceHighDemandTasks bool  `protobuf:"varint,107,opt,name=use_sequence_high_demand_tasks,json=useSequenceHighDemandTasks,proto3" json:"use_sequence_high_demand_tasks,omitempty"`
	UseAllPossibleDisjunctions bool  `protobuf:"varint,108,opt,name=use_all_possible_disjunctions,json=useAllPossibleDisjunctions,proto3" json:"use_all_possible_disjunctions,omitempty"`
	MaxEdgeFinderSize          int32 `protobuf:"varint,109,opt,name=max_edge_finder_size,json=maxEdgeFinderSize,proto3" json:"max_edge_finder_size,omitempty"`
	//
	// Control the propagation of the diffn constraint.
	//
	DiffnUseCumulative bool `protobuf:"varint,110,opt,name=diffn_use_cumulative,json=diffnUseCumulative,proto3" json:"diffn_use_cumulative,omitempty"`
	//
	// Control the implementation of the element constraint.
	//
	UseElementRmq bool `protobuf:"varint,111,opt,name=use_element_rmq,json=useElementRmq,proto3" json:"use_element_rmq,omitempty"`
	//
	// Skip locally optimal pairs of paths in PathOperators. Setting this
	// parameter to true might skip valid neighbors if there are constraints
	// linking paths together (such as precedences). In any other case this
	// should only speed up the search without omitting any neighbors.
	//
	SkipLocallyOptimalPaths bool `protobuf:"varint,113,opt,name=skip_locally_optimal_paths,json=skipLocallyOptimalPaths,proto3" json:"skip_locally_optimal_paths,omitempty"`
	//
	// Control the behavior of local search.
	//
	CheckSolutionPeriod  int32    `protobuf:"varint,114,opt,name=check_solution_period,json=checkSolutionPeriod,proto3" json:"check_solution_period,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConstraintSolverParameters) Reset()         { *m = ConstraintSolverParameters{} }
func (m *ConstraintSolverParameters) String() string { return proto.CompactTextString(m) }
func (*ConstraintSolverParameters) ProtoMessage()    {}
func (*ConstraintSolverParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_98a0e34014f3381e, []int{0}
}

func (m *ConstraintSolverParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConstraintSolverParameters.Unmarshal(m, b)
}
func (m *ConstraintSolverParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConstraintSolverParameters.Marshal(b, m, deterministic)
}
func (m *ConstraintSolverParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConstraintSolverParameters.Merge(m, src)
}
func (m *ConstraintSolverParameters) XXX_Size() int {
	return xxx_messageInfo_ConstraintSolverParameters.Size(m)
}
func (m *ConstraintSolverParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_ConstraintSolverParameters.DiscardUnknown(m)
}

var xxx_messageInfo_ConstraintSolverParameters proto.InternalMessageInfo

func (m *ConstraintSolverParameters) GetCompressTrail() ConstraintSolverParameters_TrailCompression {
	if m != nil {
		return m.CompressTrail
	}
	return ConstraintSolverParameters_NO_COMPRESSION
}

func (m *ConstraintSolverParameters) GetTrailBlockSize() int32 {
	if m != nil {
		return m.TrailBlockSize
	}
	return 0
}

func (m *ConstraintSolverParameters) GetArraySplitSize() int32 {
	if m != nil {
		return m.ArraySplitSize
	}
	return 0
}

func (m *ConstraintSolverParameters) GetStoreNames() bool {
	if m != nil {
		return m.StoreNames
	}
	return false
}

func (m *ConstraintSolverParameters) GetNameCastVariables() bool {
	if m != nil {
		return m.NameCastVariables
	}
	return false
}

func (m *ConstraintSolverParameters) GetNameAllVariables() bool {
	if m != nil {
		return m.NameAllVariables
	}
	return false
}

func (m *ConstraintSolverParameters) GetProfilePropagation() bool {
	if m != nil {
		return m.ProfilePropagation
	}
	return false
}

func (m *ConstraintSolverParameters) GetProfileFile() string {
	if m != nil {
		return m.ProfileFile
	}
	return ""
}

func (m *ConstraintSolverParameters) GetProfileLocalSearch() bool {
	if m != nil {
		return m.ProfileLocalSearch
	}
	return false
}

func (m *ConstraintSolverParameters) GetPrintLocalSearchProfile() bool {
	if m != nil {
		return m.PrintLocalSearchProfile
	}
	return false
}

func (m *ConstraintSolverParameters) GetTracePropagation() bool {
	if m != nil {
		return m.TracePropagation
	}
	return false
}

func (m *ConstraintSolverParameters) GetTraceSearch() bool {
	if m != nil {
		return m.TraceSearch
	}
	return false
}

func (m *ConstraintSolverParameters) GetPrintModel() bool {
	if m != nil {
		return m.PrintModel
	}
	return false
}

func (m *ConstraintSolverParameters) GetPrintModelStats() bool {
	if m != nil {
		return m.PrintModelStats
	}
	return false
}

func (m *ConstraintSolverParameters) GetPrintAddedConstraints() bool {
	if m != nil {
		return m.PrintAddedConstraints
	}
	return false
}

func (m *ConstraintSolverParameters) GetDisableSolve() bool {
	if m != nil {
		return m.DisableSolve
	}
	return false
}

func (m *ConstraintSolverParameters) GetUseSmallTable() bool {
	if m != nil {
		return m.UseSmallTable
	}
	return false
}

func (m *ConstraintSolverParameters) GetUseCumulativeEdgeFinder() bool {
	if m != nil {
		return m.UseCumulativeEdgeFinder
	}
	return false
}

func (m *ConstraintSolverParameters) GetUseCumulativeTimeTable() bool {
	if m != nil {
		return m.UseCumulativeTimeTable
	}
	return false
}

func (m *ConstraintSolverParameters) GetUseCumulativeTimeTableSync() bool {
	if m != nil {
		return m.UseCumulativeTimeTableSync
	}
	return false
}

func (m *ConstraintSolverParameters) GetUseSequenceHighDemandTasks() bool {
	if m != nil {
		return m.UseSequenceHighDemandTasks
	}
	return false
}

func (m *ConstraintSolverParameters) GetUseAllPossibleDisjunctions() bool {
	if m != nil {
		return m.UseAllPossibleDisjunctions
	}
	return false
}

func (m *ConstraintSolverParameters) GetMaxEdgeFinderSize() int32 {
	if m != nil {
		return m.MaxEdgeFinderSize
	}
	return 0
}

func (m *ConstraintSolverParameters) GetDiffnUseCumulative() bool {
	if m != nil {
		return m.DiffnUseCumulative
	}
	return false
}

func (m *ConstraintSolverParameters) GetUseElementRmq() bool {
	if m != nil {
		return m.UseElementRmq
	}
	return false
}

func (m *ConstraintSolverParameters) GetSkipLocallyOptimalPaths() bool {
	if m != nil {
		return m.SkipLocallyOptimalPaths
	}
	return false
}

func (m *ConstraintSolverParameters) GetCheckSolutionPeriod() int32 {
	if m != nil {
		return m.CheckSolutionPeriod
	}
	return 0
}

func init() {
	proto.RegisterEnum("operations_research.ConstraintSolverParameters_TrailCompression", ConstraintSolverParameters_TrailCompression_name, ConstraintSolverParameters_TrailCompression_value)
	proto.RegisterType((*ConstraintSolverParameters)(nil), "operations_research.ConstraintSolverParameters")
}

func init() {
	proto.RegisterFile("ortools/constraint_solver/solver_parameters.proto", fileDescriptor_98a0e34014f3381e)
}

var fileDescriptor_98a0e34014f3381e = []byte{
	// 856 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x95, 0x6d, 0x6f, 0x5b, 0x35,
	0x14, 0xc7, 0xc9, 0xc8, 0x46, 0xe6, 0xf4, 0xe1, 0xc6, 0xed, 0x86, 0xa9, 0x04, 0x0d, 0x9b, 0x84,
	0x22, 0x40, 0xe9, 0x18, 0x12, 0x12, 0x42, 0x42, 0xb4, 0x59, 0xc7, 0x5a, 0x75, 0x4d, 0x94, 0x1b,
	0x40, 0xda, 0x1b, 0xcb, 0xbd, 0xf7, 0xf4, 0xc6, 0x8b, 0x7d, 0x7d, 0x6b, 0x3b, 0xd5, 0xba, 0x8f,
	0xc4, 0xe7, 0xe1, 0x03, 0x21, 0x1f, 0xdf, 0x3c, 0xb4, 0xea, 0xde, 0x24, 0xd2, 0xff, 0xff, 0x3b,
	0xe7, 0xda, 0xe7, 0xf8, 0xd8, 0xe4, 0x27, 0x63, 0xbd, 0x31, 0xca, 0x1d, 0x64, 0xa6, 0x74, 0xde,
	0x0a, 0x59, 0x7a, 0xee, 0x8c, 0xba, 0x06, 0x7b, 0x10, 0xff, 0x78, 0x25, 0xac, 0xd0, 0xe0, 0xc1,
	0xba, 0x7e, 0x65, 0x8d, 0x37, 0x74, 0xc7, 0x54, 0x60, 0x85, 0x97, 0xa6, 0x74, 0xdc, 0x82, 0x03,
	0x61, 0xb3, 0xe9, 0xb3, 0xff, 0xda, 0x64, 0x6f, 0xb0, 0x4c, 0x91, 0x62, 0xe8, 0x68, 0x19, 0x49,
	0x0b, 0xb2, 0x95, 0x19, 0x5d, 0x59, 0x70, 0x8e, 0x07, 0x44, 0xb1, 0x46, 0xb7, 0xd1, 0xdb, 0x7a,
	0xf9, 0x47, 0xff, 0x9e, 0x64, 0xfd, 0x4f, 0x27, 0xea, 0x4f, 0x42, 0xf0, 0xa0, 0x4e, 0x25, 0x4d,
	0x39, 0xde, 0x5c, 0xe4, 0x45, 0x87, 0xf6, 0x48, 0x82, 0xf9, 0xf9, 0x85, 0x32, 0xd9, 0x8c, 0x3b,
	0xf9, 0x11, 0xd8, 0x83, 0x6e, 0xa3, 0xf7, 0x70, 0xbc, 0x85, 0xfa, 0x51, 0x90, 0x53, 0xf9, 0x11,
	0x02, 0x29, 0xac, 0x15, 0x37, 0xdc, 0x55, 0x4a, 0xfa, 0x48, 0x7e, 0x1e, 0x49, 0xd4, 0xd3, 0x20,
	0x23, 0xb9, 0x4f, 0xda, 0xce, 0x1b, 0x0b, 0xbc, 0x14, 0x1a, 0x1c, 0x6b, 0x76, 0x1b, 0xbd, 0xd6,
	0x98, 0xa0, 0x74, 0x1e, 0x14, 0xda, 0x27, 0x3b, 0xc1, 0xe2, 0x99, 0x70, 0x9e, 0x5f, 0x0b, 0x2b,
	0xc5, 0x85, 0x02, 0xc7, 0x1e, 0x22, 0xd8, 0x09, 0xd6, 0x40, 0x38, 0xff, 0xf7, 0xc2, 0xa0, 0x3f,
	0x12, 0x8a, 0xbc, 0x50, 0x6a, 0x0d, 0x7f, 0x84, 0x78, 0x12, 0x9c, 0x43, 0xa5, 0x56, 0xf4, 0x01,
	0xd9, 0xa9, 0xac, 0xb9, 0x94, 0x0a, 0x78, 0x65, 0x4d, 0x25, 0x0a, 0x2c, 0x17, 0xfb, 0x02, 0x71,
	0x5a, 0x5b, 0xa3, 0x95, 0x43, 0xbf, 0x25, 0x1b, 0x8b, 0x80, 0xf0, 0xc3, 0x5a, 0xdd, 0x46, 0xef,
	0xf1, 0xb8, 0x5d, 0x6b, 0xaf, 0xa5, 0x02, 0xfa, 0x82, 0xec, 0x2e, 0x10, 0x65, 0x32, 0xa1, 0x78,
	0xac, 0x3c, 0x4b, 0x6e, 0x25, 0x3d, 0x0b, 0x56, 0x8a, 0x0e, 0xfd, 0x8d, 0xec, 0x55, 0x36, 0x9c,
	0x8e, 0x75, 0x9e, 0xd7, 0x20, 0xeb, 0x60, 0xdc, 0x97, 0x48, 0xac, 0x45, 0x8d, 0xa2, 0x4d, 0x7f,
	0x20, 0x1d, 0x6f, 0x45, 0x76, 0x7b, 0x03, 0x8f, 0xe3, 0x7e, 0xd1, 0xb8, 0xb3, 0xfc, 0x08, 0xd7,
	0x6b, 0x22, 0xc8, 0xb5, 0x51, 0xab, 0x17, 0xb3, 0x4f, 0xda, 0x71, 0x31, 0xda, 0xe4, 0xa0, 0x58,
	0x3b, 0x76, 0x04, 0xa5, 0xb7, 0x41, 0xa1, 0xdf, 0x93, 0xce, 0x1a, 0xc0, 0x9d, 0x17, 0xde, 0xb1,
	0x0d, 0xc4, 0xb6, 0x57, 0x58, 0x1a, 0x64, 0xfa, 0x0b, 0x89, 0xeb, 0xe6, 0x22, 0xcf, 0x21, 0xe7,
	0xab, 0x41, 0x70, 0x6c, 0x13, 0x23, 0x9e, 0xa0, 0x7d, 0x18, 0xdc, 0xd5, 0xc9, 0x74, 0xf4, 0x39,
	0xd9, 0xcc, 0xa5, 0x0b, 0x3d, 0x8a, 0x13, 0xc3, 0xb6, 0x91, 0xde, 0xa8, 0x45, 0x3c, 0xba, 0xf4,
	0x3b, 0xb2, 0x3d, 0x77, 0xc0, 0x9d, 0x0e, 0xbd, 0xf6, 0x41, 0x67, 0x80, 0xd8, 0xe6, 0xdc, 0x41,
	0x1a, 0xd4, 0x49, 0x10, 0x43, 0x79, 0x03, 0x97, 0xcd, 0xf5, 0x5c, 0x09, 0x2f, 0xaf, 0x81, 0x43,
	0x5e, 0x84, 0xfe, 0x95, 0x39, 0x58, 0x26, 0x63, 0x79, 0xe7, 0x0e, 0x06, 0x4b, 0xe0, 0x38, 0x2f,
	0xe0, 0x35, 0xda, 0xf4, 0x57, 0xf2, 0xd5, 0x9d, 0x60, 0x2f, 0x35, 0xd4, 0x9f, 0x7b, 0x8f, 0xb1,
	0x4f, 0x6f, 0xc5, 0x4e, 0xa4, 0x86, 0xf8, 0xdd, 0x23, 0xf2, 0xcd, 0x27, 0x43, 0xb9, 0xbb, 0x29,
	0x33, 0x56, 0x61, 0xfc, 0xde, 0xfd, 0xf1, 0xe9, 0x4d, 0x99, 0x2d, 0x72, 0x38, 0xb8, 0x9a, 0x43,
	0x99, 0x01, 0x9f, 0xca, 0x62, 0xca, 0x73, 0xd0, 0xa2, 0xcc, 0xb9, 0x17, 0x6e, 0xe6, 0xd8, 0x6c,
	0x99, 0x23, 0xad, 0xa1, 0x37, 0xb2, 0x98, 0xbe, 0x42, 0x64, 0x12, 0x08, 0x7a, 0x48, 0xbe, 0x0e,
	0x39, 0x42, 0x95, 0x2a, 0xe3, 0x9c, 0x0c, 0x9f, 0xcf, 0xa5, 0x7b, 0x3f, 0x2f, 0x33, 0xbc, 0x1c,
	0x98, 0x5a, 0xa6, 0x38, 0x54, 0x6a, 0x54, 0x23, 0xaf, 0xd6, 0x08, 0x7a, 0x40, 0x76, 0xb5, 0xf8,
	0xb0, 0x5e, 0xb7, 0x38, 0xd4, 0x1a, 0x87, 0xba, 0xa3, 0xc5, 0x87, 0x55, 0xc9, 0x70, 0xae, 0x5f,
	0x90, 0xdd, 0x5c, 0x5e, 0x5e, 0x96, 0xfc, 0x76, 0x05, 0x58, 0x19, 0x87, 0x00, 0xbd, 0xbf, 0xd6,
	0xb7, 0xbd, 0xe8, 0x26, 0x28, 0xd0, 0x50, 0x7a, 0x6e, 0xf5, 0x15, 0x33, 0xcb, 0x6e, 0x1e, 0x47,
	0x75, 0xac, 0xaf, 0x42, 0x37, 0xdd, 0x4c, 0x56, 0x71, 0x56, 0xd4, 0x0d, 0x37, 0x95, 0x97, 0x5a,
	0x28, 0x5e, 0x09, 0x3f, 0x75, 0xec, 0x2a, 0x76, 0x33, 0x10, 0x67, 0x11, 0x18, 0x46, 0x7f, 0x14,
	0x6c, 0xfa, 0x92, 0x3c, 0xc9, 0xa6, 0x10, 0x2e, 0x2f, 0xa3, 0xe6, 0x61, 0x6b, 0xbc, 0x02, 0x2b,
	0x4d, 0xce, 0x2c, 0x6e, 0x64, 0x07, 0xcd, 0xb4, 0xf6, 0x46, 0x68, 0x3d, 0xfb, 0x9d, 0x24, 0x77,
	0x6f, 0x46, 0x4a, 0xc9, 0xd6, 0xf9, 0x90, 0x0f, 0x86, 0x6f, 0x47, 0xe3, 0xe3, 0x34, 0x3d, 0x19,
	0x9e, 0x27, 0x9f, 0xd1, 0xa7, 0x84, 0x2e, 0x04, 0xfe, 0xcf, 0xc9, 0xe4, 0x0d, 0x7f, 0x77, 0x76,
	0x72, 0x94, 0x34, 0x4e, 0x9b, 0xad, 0x3c, 0x81, 0xd3, 0x66, 0xeb, 0x32, 0x29, 0x4e, 0x9b, 0xad,
	0x22, 0x99, 0x9e, 0x36, 0x5b, 0xd3, 0x44, 0x1e, 0xcd, 0xc8, 0xf3, 0xcc, 0xe8, 0x7e, 0x61, 0x4c,
	0xa1, 0xa0, 0x5f, 0xbf, 0x15, 0xfd, 0xb5, 0x11, 0x89, 0xf7, 0x73, 0xe3, 0x5d, 0x77, 0xf1, 0x8e,
	0x14, 0xe6, 0x9e, 0xa7, 0xa4, 0x80, 0xf2, 0xdf, 0x07, 0xfb, 0x7f, 0xc6, 0x2c, 0x43, 0x3b, 0xc1,
	0x2c, 0x77, 0x6f, 0xf9, 0x8b, 0x47, 0xf8, 0xbe, 0xfc, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x78, 0x09, 0x79, 0xc3, 0x94, 0x06, 0x00, 0x00,
}
