// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ortools/constraint_solver/routing_parameters.proto

package gen

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	math "math"
	gen "ortools/go/util/gen"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Underlying solver to use in dimension scheduling, respectively for
// continuous and mixed models.
type RoutingSearchParameters_SchedulingSolver int32

const (
	RoutingSearchParameters_UNSET  RoutingSearchParameters_SchedulingSolver = 0
	RoutingSearchParameters_GLOP   RoutingSearchParameters_SchedulingSolver = 1
	RoutingSearchParameters_CP_SAT RoutingSearchParameters_SchedulingSolver = 2
)

var RoutingSearchParameters_SchedulingSolver_name = map[int32]string{
	0: "UNSET",
	1: "GLOP",
	2: "CP_SAT",
}

var RoutingSearchParameters_SchedulingSolver_value = map[string]int32{
	"UNSET":  0,
	"GLOP":   1,
	"CP_SAT": 2,
}

func (x RoutingSearchParameters_SchedulingSolver) String() string {
	return proto.EnumName(RoutingSearchParameters_SchedulingSolver_name, int32(x))
}

func (RoutingSearchParameters_SchedulingSolver) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a3670fa7c3c9ee13, []int{0, 0}
}

// Parameters defining the search used to solve vehicle routing problems.
//
// If a parameter is unset (or, equivalently, set to its default value),
// then the routing library will pick its preferred value for that parameter
// automatically: this should be the case for most parameters.
// To see those "default" parameters, call GetDefaultRoutingSearchParameters().
// Next ID: 37
type RoutingSearchParameters struct {
	// First solution strategies, used as starting point of local search.
	FirstSolutionStrategy FirstSolutionStrategy_Value `protobuf:"varint,1,opt,name=first_solution_strategy,json=firstSolutionStrategy,proto3,enum=operations_research.FirstSolutionStrategy_Value" json:"first_solution_strategy,omitempty"`
	// --- Advanced first solutions strategy settings ---
	// Don't touch these unless you know what you are doing.
	//
	// Use filtered version of first solution strategy if available.
	UseUnfilteredFirstSolutionStrategy bool `protobuf:"varint,2,opt,name=use_unfiltered_first_solution_strategy,json=useUnfilteredFirstSolutionStrategy,proto3" json:"use_unfiltered_first_solution_strategy,omitempty"`
	// Parameters specific to the Savings first solution heuristic.
	// Ratio (in ]0, 1]) of neighbors to consider for each node when constructing
	// the savings. If unspecified, its value is considered to be 1.0.
	SavingsNeighborsRatio float64 `protobuf:"fixed64,14,opt,name=savings_neighbors_ratio,json=savingsNeighborsRatio,proto3" json:"savings_neighbors_ratio,omitempty"`
	// The number of neighbors considered for each node in the Savings heuristic
	// is chosen so that the space used to store the savings doesn't exceed
	// savings_max_memory_usage_bytes, which must be in ]0, 1e10].
	// NOTE: If both savings_neighbors_ratio and savings_max_memory_usage_bytes
	// are specified, the number of neighbors considered for each node will be the
	// minimum of the two numbers determined by these parameters.
	SavingsMaxMemoryUsageBytes float64 `protobuf:"fixed64,23,opt,name=savings_max_memory_usage_bytes,json=savingsMaxMemoryUsageBytes,proto3" json:"savings_max_memory_usage_bytes,omitempty"`
	// Add savings related to reverse arcs when finding the nearest neighbors
	// of the nodes.
	SavingsAddReverseArcs bool `protobuf:"varint,15,opt,name=savings_add_reverse_arcs,json=savingsAddReverseArcs,proto3" json:"savings_add_reverse_arcs,omitempty"`
	// Coefficient of the cost of the arc for which the saving value is being
	// computed:
	// Saving(a-->b) = Cost(a-->end) + Cost(start-->b)
	//                 - savings_arc_coefficient * Cost(a-->b)
	// This parameter must be greater than 0, and its default value is 1.
	SavingsArcCoefficient float64 `protobuf:"fixed64,18,opt,name=savings_arc_coefficient,json=savingsArcCoefficient,proto3" json:"savings_arc_coefficient,omitempty"`
	// When true, the routes are built in parallel, sequentially otherwise.
	SavingsParallelRoutes bool `protobuf:"varint,19,opt,name=savings_parallel_routes,json=savingsParallelRoutes,proto3" json:"savings_parallel_routes,omitempty"`
	// Ratio (between 0 and 1) of available vehicles in the model on which
	// farthest nodes of the model are inserted as seeds in the
	// GlobalCheapestInsertion first solution heuristic.
	CheapestInsertionFarthestSeedsRatio float64 `protobuf:"fixed64,16,opt,name=cheapest_insertion_farthest_seeds_ratio,json=cheapestInsertionFarthestSeedsRatio,proto3" json:"cheapest_insertion_farthest_seeds_ratio,omitempty"`
	// Ratio (in ]0, 1]) of neighbors to consider for each node when creating
	// new insertions in the parallel/sequential cheapest insertion heuristic.
	// If not overridden, its default value is 1, meaning all neighbors will be
	// considered.
	//
	// Neighbors ratio for the first solution heuristic.
	CheapestInsertionFirstSolutionNeighborsRatio float64 `protobuf:"fixed64,21,opt,name=cheapest_insertion_first_solution_neighbors_ratio,json=cheapestInsertionFirstSolutionNeighborsRatio,proto3" json:"cheapest_insertion_first_solution_neighbors_ratio,omitempty"`
	// Neighbors ratio for the heuristic when used in a local search operator (see
	// local_search_operators.use_global_cheapest_insertion_path_lns and
	// local_search_operators.use_global_cheapest_insertion_chain_lns below).
	CheapestInsertionLsOperatorNeighborsRatio float64 `protobuf:"fixed64,31,opt,name=cheapest_insertion_ls_operator_neighbors_ratio,json=cheapestInsertionLsOperatorNeighborsRatio,proto3" json:"cheapest_insertion_ls_operator_neighbors_ratio,omitempty"`
	// If true use minimum matching instead of minimal matching in the
	// Christofides algorithm.
	ChristofidesUseMinimumMatching bool                                                      `protobuf:"varint,30,opt,name=christofides_use_minimum_matching,json=christofidesUseMinimumMatching,proto3" json:"christofides_use_minimum_matching,omitempty"`
	LocalSearchOperators           *RoutingSearchParameters_LocalSearchNeighborhoodOperators `protobuf:"bytes,3,opt,name=local_search_operators,json=localSearchOperators,proto3" json:"local_search_operators,omitempty"`
	// Number of expensive arcs to consider cutting in the RelocateExpensiveChain
	// neighborhood operator (see
	// LocalSearchNeighborhoodOperators.use_relocate_expensive_chain()).
	// This parameter must be greater than 2.
	// NOTE(user): The number of neighbors generated by the operator for
	// relocate_expensive_chain_num_arcs_to_consider = K is around
	// K*(K-1)/2 * number_of_routes * number_of_nodes.
	RelocateExpensiveChainNumArcsToConsider int32 `protobuf:"varint,20,opt,name=relocate_expensive_chain_num_arcs_to_consider,json=relocateExpensiveChainNumArcsToConsider,proto3" json:"relocate_expensive_chain_num_arcs_to_consider,omitempty"`
	// Number of expensive arcs to consider cutting in the
	// FilteredHeuristicExpensiveChainLNSOperator operator.
	HeuristicExpensiveChainLnsNumArcsToConsider int32 `protobuf:"varint,32,opt,name=heuristic_expensive_chain_lns_num_arcs_to_consider,json=heuristicExpensiveChainLnsNumArcsToConsider,proto3" json:"heuristic_expensive_chain_lns_num_arcs_to_consider,omitempty"`
	// Number of closest nodes to consider for each node during the destruction
	// phase of the FilteredHeuristicCloseNodesLNSOperator.
	HeuristicCloseNodesLnsNumNodes int32 `protobuf:"varint,35,opt,name=heuristic_close_nodes_lns_num_nodes,json=heuristicCloseNodesLnsNumNodes,proto3" json:"heuristic_close_nodes_lns_num_nodes,omitempty"`
	// Local search metaheuristics used to guide the search.
	LocalSearchMetaheuristic LocalSearchMetaheuristic_Value `protobuf:"varint,4,opt,name=local_search_metaheuristic,json=localSearchMetaheuristic,proto3,enum=operations_research.LocalSearchMetaheuristic_Value" json:"local_search_metaheuristic,omitempty"`
	// These are advanced settings which should not be modified unless you know
	// what you are doing.
	// Lambda coefficient used to penalize arc costs when GUIDED_LOCAL_SEARCH is
	// used. Must be positive.
	GuidedLocalSearchLambdaCoefficient float64 `protobuf:"fixed64,5,opt,name=guided_local_search_lambda_coefficient,json=guidedLocalSearchLambdaCoefficient,proto3" json:"guided_local_search_lambda_coefficient,omitempty"`
	// --- Search control ---
	//
	// If true, the solver should use depth-first search rather than local search
	// to solve the problem.
	UseDepthFirstSearch bool `protobuf:"varint,6,opt,name=use_depth_first_search,json=useDepthFirstSearch,proto3" json:"use_depth_first_search,omitempty"`
	// If true, use the CP solver to find a solution. Either local or depth-first
	// search will be used depending on the value of use_depth_first_search. Will
	// be run before the CP-SAT solver (cf. use_cp_sat).
	UseCp gen.OptionalBoolean `protobuf:"varint,28,opt,name=use_cp,json=useCp,proto3,enum=operations_research.OptionalBoolean" json:"use_cp,omitempty"`
	// If true, use the CP-SAT solver to find a solution. If use_cp is also true,
	// the CP-SAT solver will be run after the CP solver if there is time
	// remaining and will use the CP solution as a hint for the CP-SAT search.
	// As of 5/2019, only TSP models can be solved.
	UseCpSat                     gen.OptionalBoolean                      `protobuf:"varint,27,opt,name=use_cp_sat,json=useCpSat,proto3,enum=operations_research.OptionalBoolean" json:"use_cp_sat,omitempty"`
	ContinuousSchedulingSolver   RoutingSearchParameters_SchedulingSolver `protobuf:"varint,33,opt,name=continuous_scheduling_solver,json=continuousSchedulingSolver,proto3,enum=operations_research.RoutingSearchParameters_SchedulingSolver" json:"continuous_scheduling_solver,omitempty"`
	MixedIntegerSchedulingSolver RoutingSearchParameters_SchedulingSolver `protobuf:"varint,34,opt,name=mixed_integer_scheduling_solver,json=mixedIntegerSchedulingSolver,proto3,enum=operations_research.RoutingSearchParameters_SchedulingSolver" json:"mixed_integer_scheduling_solver,omitempty"`
	// Minimum step by which the solution must be improved in local search. 0
	// means "unspecified". If this value is fractional, it will get rounded to
	// the nearest integer.
	OptimizationStep float64 `protobuf:"fixed64,7,opt,name=optimization_step,json=optimizationStep,proto3" json:"optimization_step,omitempty"`
	// Number of solutions to collect during the search. Corresponds to the best
	// solutions found during the search. 0 means "unspecified".
	NumberOfSolutionsToCollect int32 `protobuf:"varint,17,opt,name=number_of_solutions_to_collect,json=numberOfSolutionsToCollect,proto3" json:"number_of_solutions_to_collect,omitempty"`
	// -- Search limits --
	// Limit to the number of solutions generated during the search. 0 means
	// "unspecified".
	SolutionLimit int64 `protobuf:"varint,8,opt,name=solution_limit,json=solutionLimit,proto3" json:"solution_limit,omitempty"`
	// Limit to the time spent in the search.
	TimeLimit *duration.Duration `protobuf:"bytes,9,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`
	// Limit to the time spent in the completion search for each local search
	// neighbor.
	LnsTimeLimit *duration.Duration `protobuf:"bytes,10,opt,name=lns_time_limit,json=lnsTimeLimit,proto3" json:"lns_time_limit,omitempty"`
	// --- Propagation control ---
	// These are advanced settings which should not be modified unless you know
	// what you are doing.
	//
	// Use constraints with full propagation in routing model (instead of 'light'
	// propagation only). Full propagation is only necessary when using
	// depth-first search or for models which require strong propagation to
	// finalize the value of secondary variables.
	// Changing this setting to true will slow down the search in most cases and
	// increase memory consumption in all cases.
	UseFullPropagation bool `protobuf:"varint,11,opt,name=use_full_propagation,json=useFullPropagation,proto3" json:"use_full_propagation,omitempty"`
	// --- Miscellaneous ---
	// Some of these are advanced settings which should not be modified unless you
	// know what you are doing.
	//
	// Activates search logging. For each solution found during the search, the
	// following will be displayed: its objective value, the maximum objective
	// value since the beginning of the search, the elapsed time since the
	// beginning of the search, the number of branches explored in the search
	// tree, the number of failures in the search tree, the depth of the search
	// tree, the number of local search neighbors explored, the number of local
	// search neighbors filtered by local search filters, the number of local
	// search neighbors accepted, the total memory used and the percentage of the
	// search done.
	LogSearch bool `protobuf:"varint,13,opt,name=log_search,json=logSearch,proto3" json:"log_search,omitempty"`
	// In logs, cost values will be scaled and offset by the given values in the
	// following way: log_cost_scaling_factor * (cost + log_cost_offset)
	LogCostScalingFactor float64 `protobuf:"fixed64,22,opt,name=log_cost_scaling_factor,json=logCostScalingFactor,proto3" json:"log_cost_scaling_factor,omitempty"`
	LogCostOffset        float64 `protobuf:"fixed64,29,opt,name=log_cost_offset,json=logCostOffset,proto3" json:"log_cost_offset,omitempty"`
	// In logs, this tag will be appended to each line corresponding to a new
	// solution. Useful to sort out logs when several solves are run in parallel.
	LogTag               string   `protobuf:"bytes,36,opt,name=log_tag,json=logTag,proto3" json:"log_tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoutingSearchParameters) Reset()         { *m = RoutingSearchParameters{} }
func (m *RoutingSearchParameters) String() string { return proto.CompactTextString(m) }
func (*RoutingSearchParameters) ProtoMessage()    {}
func (*RoutingSearchParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3670fa7c3c9ee13, []int{0}
}

func (m *RoutingSearchParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingSearchParameters.Unmarshal(m, b)
}
func (m *RoutingSearchParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingSearchParameters.Marshal(b, m, deterministic)
}
func (m *RoutingSearchParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingSearchParameters.Merge(m, src)
}
func (m *RoutingSearchParameters) XXX_Size() int {
	return xxx_messageInfo_RoutingSearchParameters.Size(m)
}
func (m *RoutingSearchParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingSearchParameters.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingSearchParameters proto.InternalMessageInfo

func (m *RoutingSearchParameters) GetFirstSolutionStrategy() FirstSolutionStrategy_Value {
	if m != nil {
		return m.FirstSolutionStrategy
	}
	return FirstSolutionStrategy_UNSET
}

func (m *RoutingSearchParameters) GetUseUnfilteredFirstSolutionStrategy() bool {
	if m != nil {
		return m.UseUnfilteredFirstSolutionStrategy
	}
	return false
}

func (m *RoutingSearchParameters) GetSavingsNeighborsRatio() float64 {
	if m != nil {
		return m.SavingsNeighborsRatio
	}
	return 0
}

func (m *RoutingSearchParameters) GetSavingsMaxMemoryUsageBytes() float64 {
	if m != nil {
		return m.SavingsMaxMemoryUsageBytes
	}
	return 0
}

func (m *RoutingSearchParameters) GetSavingsAddReverseArcs() bool {
	if m != nil {
		return m.SavingsAddReverseArcs
	}
	return false
}

func (m *RoutingSearchParameters) GetSavingsArcCoefficient() float64 {
	if m != nil {
		return m.SavingsArcCoefficient
	}
	return 0
}

func (m *RoutingSearchParameters) GetSavingsParallelRoutes() bool {
	if m != nil {
		return m.SavingsParallelRoutes
	}
	return false
}

func (m *RoutingSearchParameters) GetCheapestInsertionFarthestSeedsRatio() float64 {
	if m != nil {
		return m.CheapestInsertionFarthestSeedsRatio
	}
	return 0
}

func (m *RoutingSearchParameters) GetCheapestInsertionFirstSolutionNeighborsRatio() float64 {
	if m != nil {
		return m.CheapestInsertionFirstSolutionNeighborsRatio
	}
	return 0
}

func (m *RoutingSearchParameters) GetCheapestInsertionLsOperatorNeighborsRatio() float64 {
	if m != nil {
		return m.CheapestInsertionLsOperatorNeighborsRatio
	}
	return 0
}

func (m *RoutingSearchParameters) GetChristofidesUseMinimumMatching() bool {
	if m != nil {
		return m.ChristofidesUseMinimumMatching
	}
	return false
}

func (m *RoutingSearchParameters) GetLocalSearchOperators() *RoutingSearchParameters_LocalSearchNeighborhoodOperators {
	if m != nil {
		return m.LocalSearchOperators
	}
	return nil
}

func (m *RoutingSearchParameters) GetRelocateExpensiveChainNumArcsToConsider() int32 {
	if m != nil {
		return m.RelocateExpensiveChainNumArcsToConsider
	}
	return 0
}

func (m *RoutingSearchParameters) GetHeuristicExpensiveChainLnsNumArcsToConsider() int32 {
	if m != nil {
		return m.HeuristicExpensiveChainLnsNumArcsToConsider
	}
	return 0
}

func (m *RoutingSearchParameters) GetHeuristicCloseNodesLnsNumNodes() int32 {
	if m != nil {
		return m.HeuristicCloseNodesLnsNumNodes
	}
	return 0
}

func (m *RoutingSearchParameters) GetLocalSearchMetaheuristic() LocalSearchMetaheuristic_Value {
	if m != nil {
		return m.LocalSearchMetaheuristic
	}
	return LocalSearchMetaheuristic_UNSET
}

func (m *RoutingSearchParameters) GetGuidedLocalSearchLambdaCoefficient() float64 {
	if m != nil {
		return m.GuidedLocalSearchLambdaCoefficient
	}
	return 0
}

func (m *RoutingSearchParameters) GetUseDepthFirstSearch() bool {
	if m != nil {
		return m.UseDepthFirstSearch
	}
	return false
}

func (m *RoutingSearchParameters) GetUseCp() gen.OptionalBoolean {
	if m != nil {
		return m.UseCp
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters) GetUseCpSat() gen.OptionalBoolean {
	if m != nil {
		return m.UseCpSat
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters) GetContinuousSchedulingSolver() RoutingSearchParameters_SchedulingSolver {
	if m != nil {
		return m.ContinuousSchedulingSolver
	}
	return RoutingSearchParameters_UNSET
}

func (m *RoutingSearchParameters) GetMixedIntegerSchedulingSolver() RoutingSearchParameters_SchedulingSolver {
	if m != nil {
		return m.MixedIntegerSchedulingSolver
	}
	return RoutingSearchParameters_UNSET
}

func (m *RoutingSearchParameters) GetOptimizationStep() float64 {
	if m != nil {
		return m.OptimizationStep
	}
	return 0
}

func (m *RoutingSearchParameters) GetNumberOfSolutionsToCollect() int32 {
	if m != nil {
		return m.NumberOfSolutionsToCollect
	}
	return 0
}

func (m *RoutingSearchParameters) GetSolutionLimit() int64 {
	if m != nil {
		return m.SolutionLimit
	}
	return 0
}

func (m *RoutingSearchParameters) GetTimeLimit() *duration.Duration {
	if m != nil {
		return m.TimeLimit
	}
	return nil
}

func (m *RoutingSearchParameters) GetLnsTimeLimit() *duration.Duration {
	if m != nil {
		return m.LnsTimeLimit
	}
	return nil
}

func (m *RoutingSearchParameters) GetUseFullPropagation() bool {
	if m != nil {
		return m.UseFullPropagation
	}
	return false
}

func (m *RoutingSearchParameters) GetLogSearch() bool {
	if m != nil {
		return m.LogSearch
	}
	return false
}

func (m *RoutingSearchParameters) GetLogCostScalingFactor() float64 {
	if m != nil {
		return m.LogCostScalingFactor
	}
	return 0
}

func (m *RoutingSearchParameters) GetLogCostOffset() float64 {
	if m != nil {
		return m.LogCostOffset
	}
	return 0
}

func (m *RoutingSearchParameters) GetLogTag() string {
	if m != nil {
		return m.LogTag
	}
	return ""
}

// Local search neighborhood operators used to build a solutions neighborhood.
// Next ID: 33
type RoutingSearchParameters_LocalSearchNeighborhoodOperators struct {
	// --- Inter-route operators ---
	// Operator which moves a single node to another position.
	// Possible neighbors for the path 1 -> 2 -> 3 -> 4 -> 5
	// (where (1, 5) are first and last nodes of the path and can therefore not
	// be moved):
	//   1 ->  3  -> [2] ->  4  -> 5
	//   1 ->  3  ->  4  -> [2] -> 5
	//   1 ->  2  ->  4  -> [3] -> 5
	//   1 -> [4] ->  2  ->  3  -> 5
	UseRelocate gen.OptionalBoolean `protobuf:"varint,1,opt,name=use_relocate,json=useRelocate,proto3,enum=operations_research.OptionalBoolean" json:"use_relocate,omitempty"`
	// Operator which moves a pair of pickup and delivery nodes to another
	// position where the first node of the pair must be before the second node
	// on the same path. Compared to the light_relocate_pair operator, tries all
	// possible positions of insertion of a pair (not only after another pair).
	// Possible neighbors for the path 1 -> A -> B -> 2 -> 3 (where (1, 3) are
	// first and last nodes of the path and can therefore not be moved, and
	// (A, B) is a pair of nodes):
	//   1 -> [A] ->  2  -> [B] -> 3
	//   1 ->  2  -> [A] -> [B] -> 3
	UseRelocatePair gen.OptionalBoolean `protobuf:"varint,2,opt,name=use_relocate_pair,json=useRelocatePair,proto3,enum=operations_research.OptionalBoolean" json:"use_relocate_pair,omitempty"`
	// Operator which moves a pair of pickup and delivery nodes after another
	// pair.
	// Possible neighbors for paths 1 -> A -> B -> 2, 3 -> C -> D -> 4 (where
	// (1, 2) and (3, 4) are first and last nodes of paths and can therefore not
	// be moved, and (A, B) and (C, D) are pair of nodes):
	//   1 -> 2, 3 -> C -> [A] -> D -> [B] -> 4
	//   1 -> A -> [C] -> B -> [D] -> 2, 3 -> 4
	UseLightRelocatePair gen.OptionalBoolean `protobuf:"varint,24,opt,name=use_light_relocate_pair,json=useLightRelocatePair,proto3,enum=operations_research.OptionalBoolean" json:"use_light_relocate_pair,omitempty"`
	// Relocate neighborhood which moves chains of neighbors.
	// The operator starts by relocating a node n after a node m, then continues
	// moving nodes which were after n as long as the "cost" added is less than
	// the "cost" of the arc (m, n). If the new chain doesn't respect the domain
	// of next variables, it will try reordering the nodes until it finds a
	// valid path.
	// Possible neighbors for path 1 -> A -> B -> C -> D -> E -> 2 (where (1, 2)
	// are first and last nodes of the path and can therefore not be moved, A
	// must be performed before B, and A, D and E are located at the same
	// place):
	// 1 -> A -> C -> [B] -> D -> E -> 2
	// 1 -> A -> C -> D -> [B] -> E -> 2
	// 1 -> A -> C -> D -> E -> [B] -> 2
	// 1 -> A -> B -> D -> [C] -> E -> 2
	// 1 -> A -> B -> D -> E -> [C] -> 2
	// 1 -> A -> [D] -> [E] -> B -> C -> 2
	// 1 -> A -> B -> [D] -> [E] ->  C -> 2
	// 1 -> A -> [E] -> B -> C -> D -> 2
	// 1 -> A -> B -> [E] -> C -> D -> 2
	// 1 -> A -> B -> C -> [E] -> D -> 2
	// This operator is extremelly useful to move chains of nodes which are
	// located at the same place (for instance nodes part of a same stop).
	UseRelocateNeighbors gen.OptionalBoolean `protobuf:"varint,3,opt,name=use_relocate_neighbors,json=useRelocateNeighbors,proto3,enum=operations_research.OptionalBoolean" json:"use_relocate_neighbors,omitempty"`
	// Relocate neighborhood that moves subpaths all pickup and delivery
	// pairs have both pickup and delivery inside the subpath or both outside
	// the subpath. For instance, for given paths:
	// 0 -> A -> B -> A' -> B' -> 5 -> 6 -> 8
	// 7 -> 9
	// Pairs (A,A') and (B,B') are interleaved, so the expected neighbors are:
	// 0 -> 5 -> A -> B -> A' -> B' -> 6 -> 8
	// 7 -> 9
	//
	// 0 -> 5 -> 6 -> A -> B -> A' -> B' -> 8
	// 7 -> 9
	//
	// 0 -> 5 -> 6 -> 8
	// 7 -> A -> B -> A' -> B' -> 9
	UseRelocateSubtrip gen.OptionalBoolean `protobuf:"varint,25,opt,name=use_relocate_subtrip,json=useRelocateSubtrip,proto3,enum=operations_research.OptionalBoolean" json:"use_relocate_subtrip,omitempty"`
	// Operator which exchanges the positions of two nodes.
	// Possible neighbors for the path 1 -> 2 -> 3 -> 4 -> 5
	// (where (1, 5) are first and last nodes of the path and can therefore not
	// be moved):
	//   1 -> [3] -> [2] ->  4  -> 5
	//   1 -> [4] ->  3  -> [2] -> 5
	//   1 ->  2  -> [4] -> [3] -> 5
	UseExchange gen.OptionalBoolean `protobuf:"varint,4,opt,name=use_exchange,json=useExchange,proto3,enum=operations_research.OptionalBoolean" json:"use_exchange,omitempty"`
	// Operator which exchanges the positions of two pair of nodes. Pairs
	// correspond to the pickup and delivery pairs defined in the routing model.
	// Possible neighbor for the paths
	// 1 -> A -> B -> 2 -> 3 and 4 -> C -> D -> 5
	// (where (1, 3) and (4, 5) are first and last nodes of the paths and can
	// therefore not be moved, and (A, B) and (C,D) are pairs of nodes):
	//   1 -> [C] ->  [D] -> 2 -> 3, 4 -> [A] -> [B] -> 5
	UseExchangePair gen.OptionalBoolean `protobuf:"varint,22,opt,name=use_exchange_pair,json=useExchangePair,proto3,enum=operations_research.OptionalBoolean" json:"use_exchange_pair,omitempty"`
	// Operator which exchanges subtrips associated to two pairs of nodes,
	// see use_relocate_subtrip for a definition of subtrips.
	UseExchangeSubtrip gen.OptionalBoolean `protobuf:"varint,26,opt,name=use_exchange_subtrip,json=useExchangeSubtrip,proto3,enum=operations_research.OptionalBoolean" json:"use_exchange_subtrip,omitempty"`
	// Operator which cross exchanges the starting chains of 2 paths, including
	// exchanging the whole paths.
	// First and last nodes are not moved.
	// Possible neighbors for the paths 1 -> 2 -> 3 -> 4 -> 5 and 6 -> 7 -> 8
	// (where (1, 5) and (6, 8) are first and last nodes of the paths and can
	// therefore not be moved):
	//   1 -> [7] -> 3 -> 4 -> 5  6 -> [2] -> 8
	//   1 -> [7] -> 4 -> 5       6 -> [2 -> 3] -> 8
	//   1 -> [7] -> 5            6 -> [2 -> 3 -> 4] -> 8
	UseCross gen.OptionalBoolean `protobuf:"varint,5,opt,name=use_cross,json=useCross,proto3,enum=operations_research.OptionalBoolean" json:"use_cross,omitempty"`
	// Not implemented yet. TODO(b/68128619): Implement.
	UseCrossExchange gen.OptionalBoolean `protobuf:"varint,6,opt,name=use_cross_exchange,json=useCrossExchange,proto3,enum=operations_research.OptionalBoolean" json:"use_cross_exchange,omitempty"`
	// Operator which detects the relocate_expensive_chain_num_arcs_to_consider
	// most expensive arcs on a path, and moves the chain resulting from cutting
	// pairs of arcs among these to another position.
	// Possible neighbors for paths 1 -> 2 (empty) and
	// 3 -> A ------> B --> C -----> D -> 4 (where A -> B and C -> D are the 2
	// most expensive arcs, and the chain resulting from breaking them is
	// B -> C):
	//   1 -> [B -> C] -> 2     3 -> A -> D -> 4
	//   1 -> 2      3 -> [B -> C] -> A -> D -> 4
	//   1 -> 2      3 -> A -> D -> [B -> C] -> 4
	UseRelocateExpensiveChain gen.OptionalBoolean `protobuf:"varint,23,opt,name=use_relocate_expensive_chain,json=useRelocateExpensiveChain,proto3,enum=operations_research.OptionalBoolean" json:"use_relocate_expensive_chain,omitempty"`
	// --- Intra-route operators ---
	// Operator which reverves a sub-chain of a path. It is called TwoOpt
	// because it breaks two arcs on the path; resulting paths are called
	// two-optimal.
	// Possible neighbors for the path 1 -> 2 -> 3 -> 4 -> 5
	// (where (1, 5) are first and last nodes of the path and can therefore not
	// be moved):
	//   1 -> [3 -> 2] -> 4  -> 5
	//   1 -> [4 -> 3  -> 2] -> 5
	//   1 ->  2 -> [4 -> 3] -> 5
	UseTwoOpt gen.OptionalBoolean `protobuf:"varint,7,opt,name=use_two_opt,json=useTwoOpt,proto3,enum=operations_research.OptionalBoolean" json:"use_two_opt,omitempty"`
	// Operator which moves sub-chains of a path of length 1, 2 and 3 to another
	// position in the same path.
	// When the length of the sub-chain is 1, the operator simply moves a node
	// to another position.
	// Possible neighbors for the path 1 -> 2 -> 3 -> 4 -> 5, for a sub-chain
	// length of 2 (where (1, 5) are first and last nodes of the path and can
	// therefore not be moved):
	//   1 ->  4 -> [2 -> 3] -> 5
	//   1 -> [3 -> 4] -> 2  -> 5
	// The OR_OPT operator is a limited version of 3-Opt (breaks 3 arcs on a
	// path).
	UseOrOpt gen.OptionalBoolean `protobuf:"varint,8,opt,name=use_or_opt,json=useOrOpt,proto3,enum=operations_research.OptionalBoolean" json:"use_or_opt,omitempty"`
	// Lin-Kernighan operator.
	// While the accumulated local gain is positive, performs a 2-OPT or a 3-OPT
	// move followed by a series of 2-OPT moves. Returns a neighbor for which
	// the global gain is positive.
	UseLinKernighan gen.OptionalBoolean `protobuf:"varint,9,opt,name=use_lin_kernighan,json=useLinKernighan,proto3,enum=operations_research.OptionalBoolean" json:"use_lin_kernighan,omitempty"`
	// Sliding TSP operator.
	// Uses an exact dynamic programming algorithm to solve the TSP
	// corresponding to path sub-chains.
	// For a subchain 1 -> 2 -> 3 -> 4 -> 5 -> 6, solves the TSP on
	// nodes A, 2, 3, 4, 5, where A is a merger of nodes 1 and 6 such that
	// cost(A,i) = cost(1,i) and cost(i,A) = cost(i,6).
	UseTspOpt gen.OptionalBoolean `protobuf:"varint,10,opt,name=use_tsp_opt,json=useTspOpt,proto3,enum=operations_research.OptionalBoolean" json:"use_tsp_opt,omitempty"`
	// --- Operators on inactive nodes ---
	// Operator which inserts an inactive node into a path.
	// Possible neighbors for the path 1 -> 2 -> 3 -> 4 with 5 inactive
	// (where 1 and 4 are first and last nodes of the path) are:
	//   1 -> [5] ->  2  ->  3  -> 4
	//   1 ->  2  -> [5] ->  3  -> 4
	//   1 ->  2  ->  3  -> [5] -> 4
	UseMakeActive gen.OptionalBoolean `protobuf:"varint,11,opt,name=use_make_active,json=useMakeActive,proto3,enum=operations_research.OptionalBoolean" json:"use_make_active,omitempty"`
	// Operator which relocates a node while making an inactive one active.
	// As of 3/2017, the operator is limited to two kinds of moves:
	// - Relocating a node and replacing it by an inactive node.
	//   Possible neighbor for path 1 -> 5, 2 -> 3 -> 6 and 4 inactive
	//   (where 1,2 and 5,6 are first and last nodes of paths) is:
	//   1 -> 3 -> 5, 2 -> 4 -> 6.
	// - Relocating a node and inserting an inactive node next to it.
	//   Possible neighbor for path 1 -> 5, 2 -> 3 -> 6 and 4 inactive
	//   (where 1,2 and 5,6 are first and last nodes of paths) is:
	//   1 -> 4 -> 3 -> 5, 2 -> 6.
	UseRelocateAndMakeActive gen.OptionalBoolean `protobuf:"varint,21,opt,name=use_relocate_and_make_active,json=useRelocateAndMakeActive,proto3,enum=operations_research.OptionalBoolean" json:"use_relocate_and_make_active,omitempty"`
	// Operator which makes path nodes inactive.
	// Possible neighbors for the path 1 -> 2 -> 3 -> 4 (where 1 and 4 are first
	// and last nodes of the path) are:
	//   1 -> 3 -> 4 with 2 inactive
	//   1 -> 2 -> 4 with 3 inactive
	UseMakeInactive gen.OptionalBoolean `protobuf:"varint,12,opt,name=use_make_inactive,json=useMakeInactive,proto3,enum=operations_research.OptionalBoolean" json:"use_make_inactive,omitempty"`
	// Operator which makes a "chain" of path nodes inactive.
	// Possible neighbors for the path 1 -> 2 -> 3 -> 4 (where 1 and 4 are first
	// and last nodes of the path) are:
	//   1 -> 3 -> 4 with 2 inactive
	//   1 -> 2 -> 4 with 3 inactive
	//   1 -> 4 with 2 and 3 inactive
	UseMakeChainInactive gen.OptionalBoolean `protobuf:"varint,13,opt,name=use_make_chain_inactive,json=useMakeChainInactive,proto3,enum=operations_research.OptionalBoolean" json:"use_make_chain_inactive,omitempty"`
	// Operator which replaces an active node by an inactive one.
	// Possible neighbors for the path 1 -> 2 -> 3 -> 4 with 5 inactive
	// (where 1 and 4 are first and last nodes of the path) are:
	//   1 -> [5] ->  3  -> 4 with 2 inactive
	//   1 ->  2  -> [5] -> 4 with 3 inactive
	UseSwapActive gen.OptionalBoolean `protobuf:"varint,14,opt,name=use_swap_active,json=useSwapActive,proto3,enum=operations_research.OptionalBoolean" json:"use_swap_active,omitempty"`
	// Operator which makes an inactive node active and an active one inactive.
	// It is similar to SwapActiveOperator excepts that it tries to insert the
	// inactive node in all possible positions instead of just the position of
	// the node made inactive.
	// Possible neighbors for the path 1 -> 2 -> 3 -> 4 with 5 inactive
	// (where 1 and 4 are first and last nodes of the path) are:
	//   1 -> [5] ->  3  -> 4 with 2 inactive
	//   1 ->  3  -> [5] -> 4 with 2 inactive
	//   1 -> [5] ->  2  -> 4 with 3 inactive
	//   1 ->  2  -> [5] -> 4 with 3 inactive
	UseExtendedSwapActive gen.OptionalBoolean `protobuf:"varint,15,opt,name=use_extended_swap_active,json=useExtendedSwapActive,proto3,enum=operations_research.OptionalBoolean" json:"use_extended_swap_active,omitempty"`
	// Operator which makes an inactive node active and an active pair of nodes
	// inactive OR makes an inactive pair of nodes active and an active node
	// inactive.
	// Possible neighbors for the path 1 -> 2 -> 3 -> 4 with 5 inactive
	// (where 1 and 4 are first and last nodes of the path and (2,3) is a pair
	// of nodes) are:
	//   1 -> [5] -> 4 with (2,3) inactive
	// Possible neighbors for the path 1 -> 2 -> 3 with (4,5) inactive
	// (where 1 and 3 are first and last nodes of the path and (4,5) is a pair
	// of nodes) are:
	//   1 -> [4] -> [5] -> 3 with 2 inactive
	UseNodePairSwapActive gen.OptionalBoolean `protobuf:"varint,20,opt,name=use_node_pair_swap_active,json=useNodePairSwapActive,proto3,enum=operations_research.OptionalBoolean" json:"use_node_pair_swap_active,omitempty"`
	// --- Large neighborhood search operators ---
	// Operator which relaxes two sub-chains of three consecutive arcs each.
	// Each sub-chain is defined by a start node and the next three arcs. Those
	// six arcs are relaxed to build a new neighbor.
	// PATH_LNS explores all possible pairs of starting nodes and so defines
	// n^2 neighbors, n being the number of nodes.
	// Note that the two sub-chains can be part of the same path; they even may
	// overlap.
	UsePathLns gen.OptionalBoolean `protobuf:"varint,16,opt,name=use_path_lns,json=usePathLns,proto3,enum=operations_research.OptionalBoolean" json:"use_path_lns,omitempty"`
	// Operator which relaxes one entire path and all unactive nodes.
	UseFullPathLns gen.OptionalBoolean `protobuf:"varint,17,opt,name=use_full_path_lns,json=useFullPathLns,proto3,enum=operations_research.OptionalBoolean" json:"use_full_path_lns,omitempty"`
	// TSP-base LNS.
	// Randomly merges consecutive nodes until n "meta"-nodes remain and solves
	// the corresponding TSP.
	// This defines an "unlimited" neighborhood which must be stopped by search
	// limits. To force diversification, the operator iteratively forces each
	// node to serve as base of a meta-node.
	UseTspLns gen.OptionalBoolean `protobuf:"varint,18,opt,name=use_tsp_lns,json=useTspLns,proto3,enum=operations_research.OptionalBoolean" json:"use_tsp_lns,omitempty"`
	// Operator which relaxes all inactive nodes and one sub-chain of six
	// consecutive arcs. That way the path can be improved by inserting inactive
	// nodes or swaping arcs.
	UseInactiveLns gen.OptionalBoolean `protobuf:"varint,19,opt,name=use_inactive_lns,json=useInactiveLns,proto3,enum=operations_research.OptionalBoolean" json:"use_inactive_lns,omitempty"`
	// --- LNS-like large neighborhood search operators using heuristics ---
	// Operator which makes all nodes on a route unperformed, and reinserts them
	// using the GlobalCheapestInsertion heuristic.
	UseGlobalCheapestInsertionPathLns gen.OptionalBoolean `protobuf:"varint,27,opt,name=use_global_cheapest_insertion_path_lns,json=useGlobalCheapestInsertionPathLns,proto3,enum=operations_research.OptionalBoolean" json:"use_global_cheapest_insertion_path_lns,omitempty"`
	// Same as above but using LocalCheapestInsertion as a heuristic.
	UseLocalCheapestInsertionPathLns gen.OptionalBoolean `protobuf:"varint,28,opt,name=use_local_cheapest_insertion_path_lns,json=useLocalCheapestInsertionPathLns,proto3,enum=operations_research.OptionalBoolean" json:"use_local_cheapest_insertion_path_lns,omitempty"`
	// This operator finds heuristic_expensive_chain_lns_num_arcs_to_consider
	// most expensive arcs on a route, makes the nodes in between pairs of these
	// expensive arcs unperformed, and reinserts them using the
	// GlobalCheapestInsertion heuristic.
	UseGlobalCheapestInsertionExpensiveChainLns gen.OptionalBoolean `protobuf:"varint,29,opt,name=use_global_cheapest_insertion_expensive_chain_lns,json=useGlobalCheapestInsertionExpensiveChainLns,proto3,enum=operations_research.OptionalBoolean" json:"use_global_cheapest_insertion_expensive_chain_lns,omitempty"`
	// Same as above but using LocalCheapestInsertion as a heuristic for
	// insertion.
	UseLocalCheapestInsertionExpensiveChainLns gen.OptionalBoolean `protobuf:"varint,30,opt,name=use_local_cheapest_insertion_expensive_chain_lns,json=useLocalCheapestInsertionExpensiveChainLns,proto3,enum=operations_research.OptionalBoolean" json:"use_local_cheapest_insertion_expensive_chain_lns,omitempty"`
	// The following operator makes a node and its
	// heuristic_close_nodes_lns_num_nodes closest neighbors unperformed along
	// with each of their corresponding performed pickup/delivery pairs, and
	// then reinserts them using the GlobalCheapestInsertion heuristic.
	UseGlobalCheapestInsertionCloseNodesLns gen.OptionalBoolean `protobuf:"varint,31,opt,name=use_global_cheapest_insertion_close_nodes_lns,json=useGlobalCheapestInsertionCloseNodesLns,proto3,enum=operations_research.OptionalBoolean" json:"use_global_cheapest_insertion_close_nodes_lns,omitempty"`
	// Same as above, but insertion positions for nodes are determined by the
	// LocalCheapestInsertion heuristic.
	UseLocalCheapestInsertionCloseNodesLns gen.OptionalBoolean `protobuf:"varint,32,opt,name=use_local_cheapest_insertion_close_nodes_lns,json=useLocalCheapestInsertionCloseNodesLns,proto3,enum=operations_research.OptionalBoolean" json:"use_local_cheapest_insertion_close_nodes_lns,omitempty"`
	XXX_NoUnkeyedLiteral                   struct{}            `json:"-"`
	XXX_unrecognized                       []byte              `json:"-"`
	XXX_sizecache                          int32               `json:"-"`
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) Reset() {
	*m = RoutingSearchParameters_LocalSearchNeighborhoodOperators{}
}
func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) String() string {
	return proto.CompactTextString(m)
}
func (*RoutingSearchParameters_LocalSearchNeighborhoodOperators) ProtoMessage() {}
func (*RoutingSearchParameters_LocalSearchNeighborhoodOperators) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3670fa7c3c9ee13, []int{0, 0}
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingSearchParameters_LocalSearchNeighborhoodOperators.Unmarshal(m, b)
}
func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingSearchParameters_LocalSearchNeighborhoodOperators.Marshal(b, m, deterministic)
}
func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingSearchParameters_LocalSearchNeighborhoodOperators.Merge(m, src)
}
func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) XXX_Size() int {
	return xxx_messageInfo_RoutingSearchParameters_LocalSearchNeighborhoodOperators.Size(m)
}
func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingSearchParameters_LocalSearchNeighborhoodOperators.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingSearchParameters_LocalSearchNeighborhoodOperators proto.InternalMessageInfo

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseRelocate() gen.OptionalBoolean {
	if m != nil {
		return m.UseRelocate
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseRelocatePair() gen.OptionalBoolean {
	if m != nil {
		return m.UseRelocatePair
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseLightRelocatePair() gen.OptionalBoolean {
	if m != nil {
		return m.UseLightRelocatePair
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseRelocateNeighbors() gen.OptionalBoolean {
	if m != nil {
		return m.UseRelocateNeighbors
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseRelocateSubtrip() gen.OptionalBoolean {
	if m != nil {
		return m.UseRelocateSubtrip
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseExchange() gen.OptionalBoolean {
	if m != nil {
		return m.UseExchange
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseExchangePair() gen.OptionalBoolean {
	if m != nil {
		return m.UseExchangePair
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseExchangeSubtrip() gen.OptionalBoolean {
	if m != nil {
		return m.UseExchangeSubtrip
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseCross() gen.OptionalBoolean {
	if m != nil {
		return m.UseCross
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseCrossExchange() gen.OptionalBoolean {
	if m != nil {
		return m.UseCrossExchange
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseRelocateExpensiveChain() gen.OptionalBoolean {
	if m != nil {
		return m.UseRelocateExpensiveChain
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseTwoOpt() gen.OptionalBoolean {
	if m != nil {
		return m.UseTwoOpt
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseOrOpt() gen.OptionalBoolean {
	if m != nil {
		return m.UseOrOpt
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseLinKernighan() gen.OptionalBoolean {
	if m != nil {
		return m.UseLinKernighan
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseTspOpt() gen.OptionalBoolean {
	if m != nil {
		return m.UseTspOpt
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseMakeActive() gen.OptionalBoolean {
	if m != nil {
		return m.UseMakeActive
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseRelocateAndMakeActive() gen.OptionalBoolean {
	if m != nil {
		return m.UseRelocateAndMakeActive
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseMakeInactive() gen.OptionalBoolean {
	if m != nil {
		return m.UseMakeInactive
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseMakeChainInactive() gen.OptionalBoolean {
	if m != nil {
		return m.UseMakeChainInactive
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseSwapActive() gen.OptionalBoolean {
	if m != nil {
		return m.UseSwapActive
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseExtendedSwapActive() gen.OptionalBoolean {
	if m != nil {
		return m.UseExtendedSwapActive
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseNodePairSwapActive() gen.OptionalBoolean {
	if m != nil {
		return m.UseNodePairSwapActive
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUsePathLns() gen.OptionalBoolean {
	if m != nil {
		return m.UsePathLns
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseFullPathLns() gen.OptionalBoolean {
	if m != nil {
		return m.UseFullPathLns
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseTspLns() gen.OptionalBoolean {
	if m != nil {
		return m.UseTspLns
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseInactiveLns() gen.OptionalBoolean {
	if m != nil {
		return m.UseInactiveLns
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseGlobalCheapestInsertionPathLns() gen.OptionalBoolean {
	if m != nil {
		return m.UseGlobalCheapestInsertionPathLns
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseLocalCheapestInsertionPathLns() gen.OptionalBoolean {
	if m != nil {
		return m.UseLocalCheapestInsertionPathLns
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseGlobalCheapestInsertionExpensiveChainLns() gen.OptionalBoolean {
	if m != nil {
		return m.UseGlobalCheapestInsertionExpensiveChainLns
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseLocalCheapestInsertionExpensiveChainLns() gen.OptionalBoolean {
	if m != nil {
		return m.UseLocalCheapestInsertionExpensiveChainLns
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseGlobalCheapestInsertionCloseNodesLns() gen.OptionalBoolean {
	if m != nil {
		return m.UseGlobalCheapestInsertionCloseNodesLns
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

func (m *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseLocalCheapestInsertionCloseNodesLns() gen.OptionalBoolean {
	if m != nil {
		return m.UseLocalCheapestInsertionCloseNodesLns
	}
	return gen.OptionalBoolean_BOOL_UNSPECIFIED
}

// Parameters which have to be set when creating a RoutingModel.
type RoutingModelParameters struct {
	// Parameters to use in the underlying constraint solver.
	SolverParameters *ConstraintSolverParameters `protobuf:"bytes,1,opt,name=solver_parameters,json=solverParameters,proto3" json:"solver_parameters,omitempty"`
	// Advanced settings.
	// If set to true reduction of the underlying constraint model will be
	// attempted when all vehicles have exactly the same cost structure. This can
	// result in significant speedups.
	ReduceVehicleCostModel bool `protobuf:"varint,2,opt,name=reduce_vehicle_cost_model,json=reduceVehicleCostModel,proto3" json:"reduce_vehicle_cost_model,omitempty"`
	// Cache callback calls if the number of nodes in the model is less or equal
	// to this value.
	MaxCallbackCacheSize int32    `protobuf:"varint,3,opt,name=max_callback_cache_size,json=maxCallbackCacheSize,proto3" json:"max_callback_cache_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoutingModelParameters) Reset()         { *m = RoutingModelParameters{} }
func (m *RoutingModelParameters) String() string { return proto.CompactTextString(m) }
func (*RoutingModelParameters) ProtoMessage()    {}
func (*RoutingModelParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3670fa7c3c9ee13, []int{1}
}

func (m *RoutingModelParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingModelParameters.Unmarshal(m, b)
}
func (m *RoutingModelParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingModelParameters.Marshal(b, m, deterministic)
}
func (m *RoutingModelParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingModelParameters.Merge(m, src)
}
func (m *RoutingModelParameters) XXX_Size() int {
	return xxx_messageInfo_RoutingModelParameters.Size(m)
}
func (m *RoutingModelParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingModelParameters.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingModelParameters proto.InternalMessageInfo

func (m *RoutingModelParameters) GetSolverParameters() *ConstraintSolverParameters {
	if m != nil {
		return m.SolverParameters
	}
	return nil
}

func (m *RoutingModelParameters) GetReduceVehicleCostModel() bool {
	if m != nil {
		return m.ReduceVehicleCostModel
	}
	return false
}

func (m *RoutingModelParameters) GetMaxCallbackCacheSize() int32 {
	if m != nil {
		return m.MaxCallbackCacheSize
	}
	return 0
}

func init() {
	proto.RegisterEnum("operations_research.RoutingSearchParameters_SchedulingSolver", RoutingSearchParameters_SchedulingSolver_name, RoutingSearchParameters_SchedulingSolver_value)
	proto.RegisterType((*RoutingSearchParameters)(nil), "operations_research.RoutingSearchParameters")
	proto.RegisterType((*RoutingSearchParameters_LocalSearchNeighborhoodOperators)(nil), "operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators")
	proto.RegisterType((*RoutingModelParameters)(nil), "operations_research.RoutingModelParameters")
}

func init() {
	proto.RegisterFile("ortools/constraint_solver/routing_parameters.proto", fileDescriptor_a3670fa7c3c9ee13)
}

var fileDescriptor_a3670fa7c3c9ee13 = []byte{
	// 1904 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xeb, 0x6e, 0xdc, 0xb8,
	0x15, 0xee, 0xec, 0x6e, 0xbc, 0x31, 0x13, 0xdf, 0x18, 0x5f, 0x94, 0x69, 0xd6, 0x99, 0xd8, 0xbb,
	0x89, 0xbb, 0xd9, 0x8c, 0x13, 0x07, 0xbd, 0xa1, 0x28, 0x0a, 0x7b, 0x12, 0x07, 0xc1, 0x8e, 0x2f,
	0x98, 0x71, 0xf2, 0x63, 0xdb, 0x2e, 0xc1, 0x91, 0xce, 0x48, 0x84, 0x29, 0x51, 0x25, 0x29, 0xdb,
	0xc9, 0x9f, 0x02, 0xed, 0xfe, 0x2a, 0xfa, 0x00, 0x7d, 0x86, 0x3e, 0x40, 0x9f, 0xa9, 0x8f, 0x51,
	0x90, 0x12, 0x65, 0xcd, 0xc5, 0x8e, 0x05, 0xf4, 0x97, 0x3d, 0x3a, 0xe7, 0x7c, 0xe7, 0xca, 0xc3,
	0x73, 0x88, 0x76, 0x84, 0xd4, 0x42, 0x70, 0xb5, 0xed, 0x8b, 0x44, 0x69, 0x49, 0x59, 0xa2, 0x89,
	0x12, 0xfc, 0x0c, 0xe4, 0xb6, 0x14, 0x99, 0x66, 0x49, 0x48, 0x52, 0x2a, 0x69, 0x0c, 0x1a, 0xa4,
	0x6a, 0xa7, 0x52, 0x68, 0x81, 0xef, 0x89, 0x14, 0x24, 0xd5, 0x4c, 0x24, 0x8a, 0x48, 0x50, 0x40,
	0xa5, 0x1f, 0x35, 0xd7, 0x43, 0x21, 0x42, 0x0e, 0xdb, 0x96, 0x65, 0x90, 0x0d, 0xb7, 0x83, 0x2c,
	0xe7, 0xc9, 0x85, 0x9a, 0xcf, 0x3e, 0xad, 0x08, 0x92, 0x2c, 0x2e, 0x74, 0x34, 0x5f, 0x5c, 0xcd,
	0x9e, 0xff, 0x99, 0x30, 0xab, 0xb9, 0xe9, 0x44, 0x32, 0xcd, 0xf8, 0xb6, 0x48, 0x8d, 0x72, 0xca,
	0xc9, 0x40, 0x08, 0x0e, 0xb4, 0x30, 0x63, 0xe3, 0x3f, 0xdf, 0xa2, 0xb5, 0x5e, 0xae, 0xaf, 0x6f,
	0x0d, 0x3f, 0x2e, 0x61, 0x70, 0x84, 0xd6, 0x86, 0x4c, 0x2a, 0xab, 0x28, 0x33, 0xd2, 0xc4, 0x68,
	0xd6, 0x10, 0x7e, 0xf0, 0x1a, 0xad, 0xc6, 0xd6, 0xfc, 0xce, 0xf3, 0xf6, 0x14, 0xcf, 0xdb, 0xfb,
	0x46, 0xa6, 0x5f, 0x88, 0xf4, 0x0b, 0x89, 0xf6, 0x7b, 0xca, 0x33, 0xe8, 0xad, 0x0c, 0xa7, 0x11,
	0x71, 0x0f, 0x3d, 0xce, 0x14, 0x90, 0x2c, 0x19, 0x32, 0xae, 0x41, 0x42, 0x40, 0xae, 0x52, 0xfc,
	0x59, 0xab, 0xb1, 0x75, 0xbb, 0xb7, 0x91, 0x29, 0x78, 0x57, 0x32, 0x4f, 0x55, 0x88, 0x7f, 0x85,
	0xd6, 0x14, 0x3d, 0x63, 0x49, 0xa8, 0x48, 0x02, 0x2c, 0x8c, 0x06, 0x42, 0x2a, 0x62, 0x8d, 0xf5,
	0xe6, 0x5b, 0x8d, 0xad, 0x46, 0x6f, 0xa5, 0x20, 0x1f, 0x3a, 0x6a, 0xcf, 0x10, 0xf1, 0x1e, 0x5a,
	0x77, 0x72, 0x31, 0xbd, 0x20, 0x31, 0xc4, 0x42, 0x7e, 0x20, 0x99, 0xa2, 0x21, 0x90, 0xc1, 0x07,
	0x0d, 0xca, 0x5b, 0xb3, 0xe2, 0xcd, 0x82, 0xeb, 0x80, 0x5e, 0x1c, 0x58, 0x9e, 0x77, 0x86, 0x65,
	0xcf, 0x70, 0xe0, 0x5f, 0x23, 0xcf, 0x61, 0xd0, 0x20, 0x20, 0x12, 0xce, 0x40, 0x2a, 0x20, 0x54,
	0xfa, 0xca, 0x5b, 0xb0, 0x1e, 0x38, 0xe5, 0xbb, 0x41, 0xd0, 0xcb, 0xa9, 0xbb, 0xd2, 0x57, 0x55,
	0xa3, 0xa9, 0xf4, 0x89, 0x2f, 0x60, 0x38, 0x64, 0x3e, 0x83, 0x44, 0x7b, 0x78, 0xc4, 0xe8, 0x5d,
	0xe9, 0x77, 0x2e, 0x89, 0x55, 0x39, 0x53, 0x07, 0x9c, 0x03, 0x27, 0xa6, 0x8c, 0x40, 0x79, 0xf7,
	0x46, 0xf4, 0x1d, 0x17, 0xd4, 0x9e, 0x25, 0xe2, 0x13, 0xf4, 0xc4, 0x8f, 0x80, 0xa6, 0xa0, 0x34,
	0x61, 0x89, 0x02, 0x69, 0xa3, 0x3d, 0xa4, 0x52, 0x47, 0xe6, 0x93, 0x02, 0x08, 0x5c, 0xd0, 0x16,
	0xad, 0xfe, 0x4d, 0xc7, 0xfe, 0xd6, 0x71, 0xef, 0x17, 0xcc, 0x7d, 0xc3, 0x9b, 0x87, 0x30, 0x44,
	0x2f, 0xa6, 0xa1, 0x8e, 0xa6, 0x74, 0x3c, 0x29, 0x2b, 0x16, 0xff, 0xbb, 0x49, 0xfc, 0x6a, 0x76,
	0xc7, 0x72, 0x45, 0x51, 0x7b, 0x8a, 0x22, 0xae, 0x48, 0x5e, 0x97, 0x42, 0x4e, 0x68, 0x79, 0x68,
	0xb5, 0xfc, 0x62, 0x42, 0x4b, 0x57, 0x1d, 0x15, 0x22, 0x63, 0x2a, 0xde, 0xa2, 0x47, 0x7e, 0x24,
	0x99, 0xd2, 0x62, 0xc8, 0x02, 0x50, 0xc4, 0xd4, 0x69, 0xcc, 0x12, 0x16, 0x67, 0x31, 0x89, 0xa9,
	0xf6, 0x23, 0x96, 0x84, 0xde, 0xba, 0x8d, 0xf1, 0x7a, 0x95, 0xf1, 0x9d, 0x82, 0x83, 0x9c, 0xed,
	0xa0, 0xe0, 0xc2, 0x7f, 0x6f, 0xa0, 0x55, 0x2e, 0x7c, 0xca, 0x49, 0x7e, 0x52, 0x4a, 0x2b, 0x95,
	0xf7, 0x79, 0xab, 0xb1, 0x75, 0x67, 0xe7, 0x60, 0xea, 0x79, 0xba, 0xe2, 0x78, 0xb6, 0xbb, 0x06,
	0x2a, 0xff, 0xea, 0x6c, 0x8e, 0x84, 0x08, 0x9c, 0x1f, 0xaa, 0xb7, 0xcc, 0x2f, 0x39, 0xca, 0xaf,
	0xf8, 0x47, 0xf4, 0x4c, 0x82, 0xa1, 0x68, 0x20, 0x70, 0x91, 0x42, 0xa2, 0xd8, 0x19, 0x10, 0x3f,
	0xa2, 0x2c, 0x21, 0x49, 0x16, 0xdb, 0x22, 0x25, 0x5a, 0x10, 0xd3, 0x68, 0x58, 0x00, 0xd2, 0x5b,
	0x6e, 0x35, 0xb6, 0x6e, 0xf5, 0x9e, 0x38, 0xa1, 0xd7, 0x4e, 0xa6, 0x63, 0x44, 0x0e, 0xb3, 0xd8,
	0x14, 0xee, 0x89, 0xe8, 0x14, 0xec, 0x38, 0x44, 0x3b, 0x11, 0x64, 0x26, 0x10, 0xcc, 0x9f, 0x50,
	0xc0, 0x13, 0x35, 0x5d, 0x49, 0xcb, 0x2a, 0x79, 0x5a, 0x4a, 0x8e, 0x6a, 0xe9, 0x26, 0x6a, 0x52,
	0xd1, 0xf7, 0x68, 0xf3, 0x52, 0x91, 0xcf, 0x85, 0x02, 0x92, 0x08, 0x93, 0x22, 0xa7, 0xc4, 0xfe,
	0xf2, 0x36, 0x2d, 0xf2, 0x7a, 0xc9, 0xda, 0x31, 0x9c, 0x87, 0x86, 0x94, 0xa3, 0xda, 0x7f, 0xf1,
	0x5f, 0x50, 0x73, 0x24, 0x35, 0x31, 0x68, 0x5a, 0x8a, 0x78, 0x5f, 0xd8, 0x76, 0xf7, 0x72, 0x6a,
	0x7a, 0x2a, 0x69, 0x38, 0xa8, 0x0a, 0x15, 0x1d, 0xcf, 0xe3, 0x57, 0xd0, 0x4d, 0xd3, 0x0b, 0x33,
	0x16, 0x40, 0x40, 0x46, 0x34, 0x73, 0x1a, 0x0f, 0x02, 0x3a, 0x72, 0xf4, 0x6f, 0xd9, 0xa2, 0xdd,
	0xc8, 0xb9, 0x2b, 0xfa, 0xba, 0x96, 0xb5, 0xda, 0x07, 0x5e, 0xa2, 0x55, 0x53, 0xa0, 0x01, 0xa4,
	0x3a, 0x72, 0x07, 0xce, 0xb2, 0x7a, 0x33, 0xb6, 0x44, 0xef, 0x65, 0x0a, 0x5e, 0x19, 0x62, 0x7e,
	0xaa, 0x2c, 0x09, 0xff, 0x0e, 0xcd, 0x18, 0x21, 0x3f, 0xf5, 0x1e, 0x58, 0x3f, 0xbf, 0x9e, 0xea,
	0xe7, 0x51, 0x71, 0x81, 0xec, 0xe5, 0xf7, 0x47, 0xef, 0x56, 0xa6, 0xa0, 0x93, 0xe2, 0x3d, 0x84,
	0x72, 0x61, 0xa2, 0xa8, 0xf6, 0x7e, 0x5e, 0x03, 0xe0, 0xb6, 0x05, 0xe8, 0x53, 0x8d, 0xff, 0x8a,
	0x1e, 0xf8, 0x22, 0xd1, 0x2c, 0xc9, 0x44, 0xa6, 0x88, 0xf2, 0x23, 0x08, 0x32, 0x6e, 0x6e, 0xc0,
	0xfc, 0x6a, 0xf3, 0x1e, 0x59, 0xd4, 0xdf, 0xd7, 0x3a, 0x1d, 0xfd, 0x12, 0xa5, 0x6f, 0x41, 0x7a,
	0xcd, 0x4b, 0x15, 0xe3, 0x34, 0xfc, 0x53, 0x03, 0x3d, 0x8c, 0xd9, 0x05, 0x04, 0x84, 0x25, 0x1a,
	0x42, 0x90, 0x53, 0x8c, 0xd8, 0xf8, 0x7f, 0x18, 0xf1, 0xc0, 0x6a, 0x79, 0x9b, 0x2b, 0x99, 0x30,
	0xe3, 0x29, 0x5a, 0x32, 0xd7, 0x74, 0xcc, 0x3e, 0xd2, 0xe2, 0xd6, 0x83, 0xd4, 0xfb, 0xd2, 0x26,
	0x7f, 0xb1, 0x4a, 0xe8, 0x6b, 0x30, 0x81, 0x5f, 0x4f, 0xb2, 0x78, 0x00, 0x92, 0x88, 0x61, 0xd9,
	0x55, 0x8b, 0x43, 0xc5, 0x39, 0xf8, 0xda, 0x5b, 0xb2, 0x95, 0xdf, 0xcc, 0xb9, 0x8e, 0x86, 0xae,
	0x87, 0xda, 0x33, 0x64, 0x39, 0xf0, 0x37, 0x68, 0xbe, 0xec, 0xc7, 0x9c, 0xc5, 0x4c, 0x7b, 0xb7,
	0x5b, 0x8d, 0xad, 0xcf, 0x7b, 0x73, 0xee, 0x6b, 0xd7, 0x7c, 0xc4, 0xbf, 0x41, 0x48, 0xb3, 0x18,
	0x0a, 0x96, 0x59, 0xdb, 0xab, 0xee, 0xb7, 0xf3, 0x01, 0xa7, 0xed, 0x06, 0x9c, 0xf6, 0xab, 0x62,
	0xc0, 0xe9, 0xcd, 0x1a, 0xe6, 0x5c, 0xf2, 0x0f, 0x68, 0xde, 0x9c, 0xc6, 0x8a, 0x34, 0xfa, 0x94,
	0xf4, 0x5d, 0x9e, 0xa8, 0x93, 0x12, 0xe0, 0x39, 0x5a, 0x36, 0xe5, 0x35, 0xcc, 0x38, 0x27, 0xa9,
	0x14, 0x29, 0x0d, 0x2d, 0x97, 0x77, 0xc7, 0x96, 0x33, 0xce, 0x14, 0xec, 0x67, 0x9c, 0x1f, 0x5f,
	0x52, 0xf0, 0x57, 0x08, 0x71, 0x11, 0xba, 0xb2, 0x9f, 0xb3, 0x7c, 0xb3, 0x5c, 0x14, 0xc9, 0xc1,
	0xbf, 0x44, 0x6b, 0x86, 0xec, 0x0b, 0x73, 0x34, 0x7c, 0x6a, 0x33, 0x3c, 0xa4, 0xbe, 0x16, 0xd2,
	0x5b, 0xb5, 0x91, 0x5e, 0xe6, 0x22, 0xec, 0x08, 0xa5, 0xfb, 0x39, 0x71, 0xdf, 0xd2, 0xf0, 0x63,
	0xb4, 0x50, 0x8a, 0x89, 0xe1, 0x50, 0x81, 0xf6, 0xbe, 0xb2, 0xec, 0x73, 0x05, 0xfb, 0x91, 0xfd,
	0x88, 0xd7, 0xd0, 0x97, 0x86, 0x4f, 0xd3, 0xd0, 0xfb, 0xba, 0xd5, 0xd8, 0x9a, 0xed, 0xcd, 0x70,
	0x11, 0x9e, 0xd0, 0xb0, 0xf9, 0xaf, 0x35, 0xd4, 0xfa, 0x54, 0xc7, 0xc6, 0x6f, 0xd0, 0x5d, 0xe3,
	0xad, 0x6b, 0xb5, 0xc5, 0x98, 0x75, 0xb3, 0xe3, 0x74, 0x27, 0x53, 0xd0, 0x2b, 0x04, 0xf1, 0x31,
	0x5a, 0xaa, 0x02, 0x91, 0x94, 0x32, 0x69, 0x67, 0xa7, 0x9b, 0xa2, 0x2d, 0x54, 0xd0, 0x8e, 0x29,
	0x93, 0xf8, 0x8f, 0x68, 0xcd, 0x20, 0x72, 0x16, 0x46, 0x7a, 0x0c, 0xd7, 0xab, 0x81, 0x6b, 0xb2,
	0xd9, 0x35, 0x18, 0x23, 0xe0, 0x3f, 0xe4, 0x6d, 0xab, 0x84, 0x2d, 0x6f, 0x6d, 0x7b, 0x31, 0xd6,
	0xc1, 0x76, 0xb0, 0xe5, 0x2d, 0x8e, 0xdf, 0xe7, 0x15, 0x54, 0x62, 0xab, 0x6c, 0xa0, 0x25, 0x4b,
	0xbd, 0xfb, 0x35, 0x90, 0x71, 0x05, 0xb9, 0x9f, 0xcb, 0xbb, 0x5c, 0xc1, 0x85, 0x1f, 0xd1, 0x24,
	0x84, 0xe2, 0x8e, 0xb8, 0x79, 0xae, 0x5e, 0x17, 0x82, 0x2e, 0x57, 0x0e, 0x28, 0x8f, 0xe9, 0x6a,
	0xcd, 0x5c, 0x39, 0x34, 0x1b, 0xce, 0xc2, 0xe5, 0x12, 0xd1, 0xb9, 0xdc, 0xac, 0xe9, 0xb2, 0x03,
	0x75, 0x2e, 0xef, 0xa2, 0x59, 0xdb, 0xeb, 0xa5, 0x50, 0xca, 0x5e, 0x4a, 0xb5, 0x5a, 0xbd, 0x91,
	0xc2, 0x3d, 0x84, 0x4b, 0x88, 0xcb, 0xd8, 0xcd, 0xd4, 0xc0, 0x5a, 0x74, 0x58, 0x65, 0x00, 0x01,
	0x3d, 0x18, 0xc9, 0xf0, 0xd8, 0xd0, 0x61, 0xe7, 0xf5, 0x9b, 0xa2, 0xdf, 0xaf, 0x64, 0x7a, 0x74,
	0x06, 0xc1, 0xaf, 0x90, 0x49, 0x1b, 0xd1, 0xe7, 0x82, 0x88, 0x54, 0xdb, 0xbe, 0x7c, 0x53, 0x54,
	0x13, 0xb6, 0x93, 0x73, 0x71, 0x94, 0x6a, 0x77, 0x5f, 0x0a, 0x69, 0x41, 0x6e, 0xd7, 0x0c, 0xe2,
	0x91, 0x34, 0x18, 0x45, 0xc5, 0x70, 0x96, 0x90, 0x53, 0x90, 0x09, 0x0b, 0x23, 0x9a, 0xd8, 0xb6,
	0x5c, 0xa7, 0x62, 0xba, 0x2c, 0xf9, 0xde, 0x09, 0x97, 0xbe, 0xa9, 0xd4, 0x9a, 0x85, 0xea, 0xfa,
	0xa6, 0x52, 0x63, 0x57, 0x17, 0x2d, 0xd8, 0xf1, 0x98, 0x9e, 0x02, 0xa1, 0xbe, 0x66, 0x67, 0x60,
	0xfb, 0xf4, 0x4d, 0x91, 0xe6, 0x32, 0x05, 0x07, 0xf4, 0x14, 0x76, 0xad, 0x28, 0x0e, 0xc6, 0xd2,
	0x4a, 0x93, 0x60, 0x04, 0x7a, 0xa5, 0x06, 0xb4, 0x57, 0x49, 0xeb, 0x6e, 0x12, 0x54, 0xb4, 0x14,
	0xb1, 0xb4, 0xc0, 0x2c, 0x29, 0xa0, 0xef, 0xd6, 0x8c, 0xa5, 0xc1, 0x7b, 0x5b, 0x08, 0xbb, 0x4e,
	0x69, 0x11, 0xf3, 0xa9, 0xb7, 0xc4, 0x9d, 0xab, 0xd9, 0xcd, 0x0c, 0xae, 0x2d, 0xbe, 0x12, 0xbc,
	0x08, 0xb1, 0x3a, 0xa7, 0xa9, 0x8b, 0xc3, 0x7c, 0xcd, 0x10, 0xf7, 0xcf, 0x69, 0x5a, 0x38, 0xff,
	0x67, 0xe4, 0xe5, 0x8d, 0x42, 0x43, 0x62, 0x06, 0xd1, 0x2a, 0xec, 0x42, 0x0d, 0xd8, 0x15, 0xdb,
	0x2c, 0x72, 0x90, 0x0a, 0xfc, 0x8f, 0xc8, 0x1c, 0x27, 0x3b, 0x87, 0xdb, 0xae, 0x36, 0x82, 0xbf,
	0x5c, 0x13, 0xdf, 0xcc, 0xe9, 0xa6, 0xbb, 0x55, 0xf0, 0xf7, 0xf3, 0x16, 0x9c, 0x52, 0x1d, 0x99,
	0xa1, 0xdf, 0xae, 0xa8, 0x37, 0x85, 0x34, 0xa7, 0xf0, 0x98, 0xea, 0xa8, 0x9b, 0x28, 0x7c, 0x94,
	0xd7, 0x40, 0x3e, 0x64, 0x38, 0xb0, 0xa5, 0x1a, 0x60, 0xf3, 0x6e, 0x0e, 0x29, 0x00, 0x2b, 0xc7,
	0xc9, 0x40, 0xe1, 0xfa, 0xc7, 0xc9, 0xa0, 0x1c, 0x22, 0xd3, 0xeb, 0xca, 0xea, 0xb1, 0x50, 0xf7,
	0x6a, 0x5a, 0xe5, 0x0a, 0xc7, 0xe0, 0x9d, 0xe7, 0xaf, 0x2c, 0x21, 0x17, 0x03, 0xca, 0xc9, 0x94,
	0xc5, 0xb9, 0xf4, 0xbd, 0xce, 0x18, 0xff, 0x28, 0x53, 0xf0, 0xc6, 0x42, 0x76, 0xc6, 0x97, 0x6a,
	0x17, 0x8e, 0x0c, 0x7d, 0x63, 0xfb, 0x95, 0x5d, 0x73, 0xae, 0xd3, 0x5b, 0x67, 0xff, 0x68, 0x99,
	0x1e, 0x66, 0x10, 0xaf, 0x54, 0xfb, 0xcf, 0x06, 0x7a, 0x71, 0xbd, 0xc3, 0x53, 0xd6, 0x53, 0x3b,
	0xd6, 0xdd, 0xd4, 0x86, 0xa7, 0x57, 0xfb, 0x3e, 0xb1, 0xc0, 0xe2, 0x7f, 0x34, 0xd0, 0xf3, 0x6b,
	0xc3, 0x30, 0xcd, 0x9a, 0xf5, 0x1a, 0xd6, 0x7c, 0x7b, 0x65, 0x44, 0x26, 0x8d, 0xf9, 0xa9, 0x81,
	0x9e, 0x5d, 0x1f, 0x9b, 0xb1, 0x8d, 0xda, 0xbe, 0x9c, 0xdc, 0xd4, 0x92, 0x27, 0x57, 0xc7, 0x65,
	0x64, 0xfd, 0xc6, 0x7f, 0x6b, 0xa0, 0xef, 0xae, 0x8d, 0xc9, 0xb8, 0x15, 0xad, 0x1a, 0x56, 0x3c,
	0xbe, 0x32, 0x1e, 0x23, 0x46, 0x6c, 0xbc, 0x44, 0x8b, 0x13, 0xab, 0xd8, 0x2c, 0xba, 0xf5, 0xee,
	0xb0, 0xff, 0xfa, 0x64, 0xf1, 0x67, 0xf8, 0x36, 0xfa, 0xe2, 0x4d, 0xf7, 0xe8, 0x78, 0xb1, 0x81,
	0x11, 0x9a, 0xe9, 0x1c, 0x93, 0xfe, 0xee, 0xc9, 0xe2, 0x67, 0x1b, 0xff, 0x6d, 0xa0, 0xd5, 0x62,
	0xed, 0x3b, 0x10, 0x01, 0xf0, 0xca, 0xbb, 0xe9, 0x9f, 0xd0, 0xd2, 0xc4, 0x9b, 0xac, 0x1d, 0xe5,
	0xef, 0xec, 0x6c, 0x4f, 0x35, 0xbc, 0x53, 0xbe, 0xe9, 0xe6, 0xda, 0x2f, 0xb1, 0x7a, 0x8b, 0x6a,
	0xec, 0x0b, 0xfe, 0x2d, 0xba, 0x2f, 0x21, 0xc8, 0x7c, 0x20, 0x67, 0x10, 0x31, 0x9f, 0x43, 0xbe,
	0x94, 0xc4, 0xc6, 0x88, 0xe2, 0x79, 0x74, 0x35, 0x67, 0x78, 0x9f, 0xd3, 0xcd, 0x76, 0x62, 0x4d,
	0x34, 0xbb, 0x4f, 0x4c, 0x2f, 0x88, 0x4f, 0x39, 0x1f, 0x50, 0xff, 0x94, 0xf8, 0xd4, 0x8f, 0x80,
	0x28, 0xf6, 0x11, 0xec, 0x9c, 0x7d, 0xab, 0xb7, 0x1c, 0xd3, 0x8b, 0x4e, 0x41, 0xed, 0x18, 0x62,
	0x9f, 0x7d, 0x84, 0xbd, 0x53, 0xb4, 0xe9, 0x8b, 0xd8, 0x6d, 0x6c, 0xc5, 0xab, 0x72, 0xfb, 0xf2,
	0x21, 0xba, 0x30, 0xb1, 0xf1, 0x43, 0xcb, 0xbd, 0x38, 0x87, 0x62, 0xca, 0x3b, 0x75, 0x08, 0xc9,
	0xbf, 0x3f, 0x7b, 0xf8, 0x26, 0x47, 0x39, 0x92, 0x27, 0x16, 0x65, 0xdc, 0xf5, 0xc1, 0x8c, 0xdd,
	0x08, 0x5f, 0xfe, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x33, 0x6b, 0x7a, 0xa5, 0x89, 0x17, 0x00, 0x00,
}
