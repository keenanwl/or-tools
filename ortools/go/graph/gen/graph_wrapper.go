/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./ortools/graph/go/graph.i

package gen

/*
#define intgo swig_intgo
typedef void *swig_voidp;

#include <stdint.h>


typedef long long intgo;
typedef unsigned long long uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;


typedef long long swig_type_1;
typedef long long swig_type_2;
typedef long long swig_type_3;
typedef long long swig_type_4;
typedef long long swig_type_5;
typedef long long swig_type_6;
typedef long long swig_type_7;
typedef long long swig_type_8;
typedef long long swig_type_9;
typedef long long swig_type_10;
typedef long long swig_type_11;
typedef long long swig_type_12;
typedef long long swig_type_13;
typedef long long swig_type_14;
typedef long long swig_type_15;
typedef long long swig_type_16;
typedef long long swig_type_17;
typedef long long swig_type_18;
extern void _wrap_Swig_free_gen_73eab090ea2eb3ea(uintptr_t arg1);
extern uintptr_t _wrap_Swig_malloc_gen_73eab090ea2eb3ea(swig_intgo arg1);
extern uintptr_t _wrap_new_MaxFlow_gen_73eab090ea2eb3ea(void);
extern swig_intgo _wrap_MaxFlow_AddArcWithCapacity_gen_73eab090ea2eb3ea(uintptr_t arg1, swig_intgo arg2, swig_intgo arg3, swig_type_1 arg4);
extern swig_intgo _wrap_MaxFlow_GetNumNodes_gen_73eab090ea2eb3ea(uintptr_t arg1);
extern swig_intgo _wrap_MaxFlow_GetNumArcs_gen_73eab090ea2eb3ea(uintptr_t arg1);
extern swig_intgo _wrap_MaxFlow_GetTail_gen_73eab090ea2eb3ea(uintptr_t arg1, swig_intgo arg2);
extern swig_intgo _wrap_MaxFlow_GetHead_gen_73eab090ea2eb3ea(uintptr_t arg1, swig_intgo arg2);
extern swig_type_2 _wrap_MaxFlow_GetCapacity_gen_73eab090ea2eb3ea(uintptr_t arg1, swig_intgo arg2);
extern swig_intgo _wrap_OPTIMAL_MaxFlow_gen_73eab090ea2eb3ea(void);
extern swig_intgo _wrap_POSSIBLE_OVERFLOW_MaxFlow_gen_73eab090ea2eb3ea(void);
extern swig_intgo _wrap_BAD_INPUT_MaxFlow_gen_73eab090ea2eb3ea(void);
extern swig_intgo _wrap_BAD_RESULT_MaxFlow_gen_73eab090ea2eb3ea(void);
extern swig_intgo _wrap_MaxFlow_Solve_gen_73eab090ea2eb3ea(uintptr_t arg1, swig_intgo arg2, swig_intgo arg3);
extern swig_type_3 _wrap_MaxFlow_GetOptimalFlow_gen_73eab090ea2eb3ea(uintptr_t arg1);
extern swig_type_4 _wrap_MaxFlow_GetFlow_gen_73eab090ea2eb3ea(uintptr_t arg1, swig_intgo arg2);
extern void _wrap_MaxFlow_SetArcCapacity_gen_73eab090ea2eb3ea(uintptr_t arg1, swig_intgo arg2, swig_type_5 arg3);
extern void _wrap_delete_MaxFlow_gen_73eab090ea2eb3ea(uintptr_t arg1);
extern swig_intgo _wrap_NOT_SOLVED_MinCostFlowBase_gen_73eab090ea2eb3ea(void);
extern swig_intgo _wrap_OPTIMAL_MinCostFlowBase_gen_73eab090ea2eb3ea(void);
extern swig_intgo _wrap_FEASIBLE_MinCostFlowBase_gen_73eab090ea2eb3ea(void);
extern swig_intgo _wrap_INFEASIBLE_MinCostFlowBase_gen_73eab090ea2eb3ea(void);
extern swig_intgo _wrap_UNBALANCED_MinCostFlowBase_gen_73eab090ea2eb3ea(void);
extern swig_intgo _wrap_BAD_RESULT_MinCostFlowBase_gen_73eab090ea2eb3ea(void);
extern swig_intgo _wrap_BAD_COST_RANGE_MinCostFlowBase_gen_73eab090ea2eb3ea(void);
extern uintptr_t _wrap_new_MinCostFlowBase_gen_73eab090ea2eb3ea(void);
extern void _wrap_delete_MinCostFlowBase_gen_73eab090ea2eb3ea(uintptr_t arg1);
extern uintptr_t _wrap_new_MinCostFlow__SWIG_0_gen_73eab090ea2eb3ea(swig_intgo arg1, swig_intgo arg2);
extern uintptr_t _wrap_new_MinCostFlow__SWIG_1_gen_73eab090ea2eb3ea(swig_intgo arg1);
extern uintptr_t _wrap_new_MinCostFlow__SWIG_2_gen_73eab090ea2eb3ea(void);
extern swig_intgo _wrap_MinCostFlow_addArcWithCapacityAndUnitCost_gen_73eab090ea2eb3ea(uintptr_t arg1, swig_intgo arg2, swig_intgo arg3, swig_type_6 arg4, swig_type_7 arg5);
extern void _wrap_MinCostFlow_setNodeSupply_gen_73eab090ea2eb3ea(uintptr_t arg1, swig_intgo arg2, swig_type_8 arg3);
extern swig_intgo _wrap_MinCostFlow_solve_gen_73eab090ea2eb3ea(uintptr_t arg1);
extern swig_intgo _wrap_MinCostFlow_solveMaxFlowWithMinCost_gen_73eab090ea2eb3ea(uintptr_t arg1);
extern swig_type_9 _wrap_MinCostFlow_getOptimalCost_gen_73eab090ea2eb3ea(uintptr_t arg1);
extern swig_type_10 _wrap_MinCostFlow_getMaximumFlow_gen_73eab090ea2eb3ea(uintptr_t arg1);
extern swig_type_11 _wrap_MinCostFlow_getFlow_gen_73eab090ea2eb3ea(uintptr_t arg1, swig_intgo arg2);
extern swig_intgo _wrap_MinCostFlow_getNumNodes_gen_73eab090ea2eb3ea(uintptr_t arg1);
extern swig_intgo _wrap_MinCostFlow_getNumArcs_gen_73eab090ea2eb3ea(uintptr_t arg1);
extern swig_intgo _wrap_MinCostFlow_getTail_gen_73eab090ea2eb3ea(uintptr_t arg1, swig_intgo arg2);
extern swig_intgo _wrap_MinCostFlow_getHead_gen_73eab090ea2eb3ea(uintptr_t arg1, swig_intgo arg2);
extern swig_type_12 _wrap_MinCostFlow_getCapacity_gen_73eab090ea2eb3ea(uintptr_t arg1, swig_intgo arg2);
extern swig_type_13 _wrap_MinCostFlow_getSupply_gen_73eab090ea2eb3ea(uintptr_t arg1, swig_intgo arg2);
extern swig_type_14 _wrap_MinCostFlow_getUnitCost_gen_73eab090ea2eb3ea(uintptr_t arg1, swig_intgo arg2);
extern void _wrap_delete_MinCostFlow_gen_73eab090ea2eb3ea(uintptr_t arg1);
extern uintptr_t _wrap_new_LinearSumAssignment_gen_73eab090ea2eb3ea(void);
extern swig_intgo _wrap_LinearSumAssignment_addArcWithCost_gen_73eab090ea2eb3ea(uintptr_t arg1, swig_intgo arg2, swig_intgo arg3, swig_type_15 arg4);
extern swig_intgo _wrap_LinearSumAssignment_getNumNodes_gen_73eab090ea2eb3ea(uintptr_t arg1);
extern swig_intgo _wrap_LinearSumAssignment_getNumArcs_gen_73eab090ea2eb3ea(uintptr_t arg1);
extern swig_intgo _wrap_LinearSumAssignment_getLeftNode_gen_73eab090ea2eb3ea(uintptr_t arg1, swig_intgo arg2);
extern swig_intgo _wrap_LinearSumAssignment_getRightNode_gen_73eab090ea2eb3ea(uintptr_t arg1, swig_intgo arg2);
extern swig_type_16 _wrap_LinearSumAssignment_getCost_gen_73eab090ea2eb3ea(uintptr_t arg1, swig_intgo arg2);
extern swig_intgo _wrap_OPTIMAL_LinearSumAssignment_gen_73eab090ea2eb3ea(void);
extern swig_intgo _wrap_INFEASIBLE_LinearSumAssignment_gen_73eab090ea2eb3ea(void);
extern swig_intgo _wrap_POSSIBLE_OVERFLOW_LinearSumAssignment_gen_73eab090ea2eb3ea(void);
extern swig_intgo _wrap_LinearSumAssignment_solve_gen_73eab090ea2eb3ea(uintptr_t arg1);
extern swig_type_17 _wrap_LinearSumAssignment_getOptimalCost_gen_73eab090ea2eb3ea(uintptr_t arg1);
extern swig_intgo _wrap_LinearSumAssignment_getRightMate_gen_73eab090ea2eb3ea(uintptr_t arg1, swig_intgo arg2);
extern swig_type_18 _wrap_LinearSumAssignment_getAssignmentCost_gen_73eab090ea2eb3ea(uintptr_t arg1, swig_intgo arg2);
extern void _wrap_delete_LinearSumAssignment_gen_73eab090ea2eb3ea(uintptr_t arg1);
#undef intgo
*/
import "C"

import "unsafe"
import _ "runtime/cgo"
import "sync"

type _ unsafe.Pointer

var Swig_escape_always_false bool
var Swig_escape_val interface{}

type _swig_fnptr *byte
type _swig_memberptr *byte

type _ sync.Mutex

func Swig_free(arg1 uintptr) {
	_swig_i_0 := arg1
	C._wrap_Swig_free_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0))
}

func Swig_malloc(arg1 int) (_swig_ret uintptr) {
	var swig_r uintptr
	_swig_i_0 := arg1
	swig_r = (uintptr)(C._wrap_Swig_malloc_gen_73eab090ea2eb3ea(C.swig_intgo(_swig_i_0)))
	return swig_r
}

type SwigcptrMaxFlow uintptr

func (p SwigcptrMaxFlow) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrMaxFlow) SwigIsMaxFlow() {
}

func NewMaxFlow() (_swig_ret MaxFlow) {
	var swig_r MaxFlow
	swig_r = (MaxFlow)(SwigcptrMaxFlow(C._wrap_new_MaxFlow_gen_73eab090ea2eb3ea()))
	return swig_r
}

func (arg1 SwigcptrMaxFlow) AddArcWithCapacity(arg2 int, arg3 int, arg4 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_MaxFlow_AddArcWithCapacity_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), C.swig_intgo(_swig_i_2), C.swig_type_1(_swig_i_3)))
	return swig_r
}

func (arg1 SwigcptrMaxFlow) GetNumNodes() (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_MaxFlow_GetNumNodes_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrMaxFlow) GetNumArcs() (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_MaxFlow_GetNumArcs_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrMaxFlow) GetTail(arg2 int) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_MaxFlow_GetTail_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func (arg1 SwigcptrMaxFlow) GetHead(arg2 int) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_MaxFlow_GetHead_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func (arg1 SwigcptrMaxFlow) GetCapacity(arg2 int) (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int64)(C._wrap_MaxFlow_GetCapacity_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

type Operations_researchSimpleMaxFlowStatus int

func _swig_getMaxFlow_OPTIMAL_MaxFlow() (_swig_ret Operations_researchSimpleMaxFlowStatus) {
	var swig_r Operations_researchSimpleMaxFlowStatus
	swig_r = (Operations_researchSimpleMaxFlowStatus)(C._wrap_OPTIMAL_MaxFlow_gen_73eab090ea2eb3ea())
	return swig_r
}

var MaxFlowOPTIMAL Operations_researchSimpleMaxFlowStatus = _swig_getMaxFlow_OPTIMAL_MaxFlow()

func _swig_getMaxFlow_POSSIBLE_OVERFLOW_MaxFlow() (_swig_ret Operations_researchSimpleMaxFlowStatus) {
	var swig_r Operations_researchSimpleMaxFlowStatus
	swig_r = (Operations_researchSimpleMaxFlowStatus)(C._wrap_POSSIBLE_OVERFLOW_MaxFlow_gen_73eab090ea2eb3ea())
	return swig_r
}

var MaxFlowPOSSIBLE_OVERFLOW Operations_researchSimpleMaxFlowStatus = _swig_getMaxFlow_POSSIBLE_OVERFLOW_MaxFlow()

func _swig_getMaxFlow_BAD_INPUT_MaxFlow() (_swig_ret Operations_researchSimpleMaxFlowStatus) {
	var swig_r Operations_researchSimpleMaxFlowStatus
	swig_r = (Operations_researchSimpleMaxFlowStatus)(C._wrap_BAD_INPUT_MaxFlow_gen_73eab090ea2eb3ea())
	return swig_r
}

var MaxFlowBAD_INPUT Operations_researchSimpleMaxFlowStatus = _swig_getMaxFlow_BAD_INPUT_MaxFlow()

func _swig_getMaxFlow_BAD_RESULT_MaxFlow() (_swig_ret Operations_researchSimpleMaxFlowStatus) {
	var swig_r Operations_researchSimpleMaxFlowStatus
	swig_r = (Operations_researchSimpleMaxFlowStatus)(C._wrap_BAD_RESULT_MaxFlow_gen_73eab090ea2eb3ea())
	return swig_r
}

var MaxFlowBAD_RESULT Operations_researchSimpleMaxFlowStatus = _swig_getMaxFlow_BAD_RESULT_MaxFlow()

func (arg1 SwigcptrMaxFlow) Solve(arg2 int, arg3 int) (_swig_ret Operations_researchSimpleMaxFlowStatus) {
	var swig_r Operations_researchSimpleMaxFlowStatus
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (Operations_researchSimpleMaxFlowStatus)(C._wrap_MaxFlow_Solve_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), C.swig_intgo(_swig_i_2)))
	return swig_r
}

func (arg1 SwigcptrMaxFlow) GetOptimalFlow() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_MaxFlow_GetOptimalFlow_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrMaxFlow) GetFlow(arg2 int) (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int64)(C._wrap_MaxFlow_GetFlow_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func (arg1 SwigcptrMaxFlow) SetArcCapacity(arg2 int, arg3 int64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	C._wrap_MaxFlow_SetArcCapacity_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), C.swig_type_5(_swig_i_2))
}

func DeleteMaxFlow(arg1 MaxFlow) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_MaxFlow_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0))
}

type MaxFlow interface {
	Swigcptr() uintptr
	SwigIsMaxFlow()
	AddArcWithCapacity(arg2 int, arg3 int, arg4 int64) (_swig_ret int)
	GetNumNodes() (_swig_ret int)
	GetNumArcs() (_swig_ret int)
	GetTail(arg2 int) (_swig_ret int)
	GetHead(arg2 int) (_swig_ret int)
	GetCapacity(arg2 int) (_swig_ret int64)
	Solve(arg2 int, arg3 int) (_swig_ret Operations_researchSimpleMaxFlowStatus)
	GetOptimalFlow() (_swig_ret int64)
	GetFlow(arg2 int) (_swig_ret int64)
	SetArcCapacity(arg2 int, arg3 int64)
}

type SwigcptrMinCostFlowBase uintptr

func (p SwigcptrMinCostFlowBase) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrMinCostFlowBase) SwigIsMinCostFlowBase() {
}

type Operations_researchMinCostFlowBaseStatus int

func _swig_getMinCostFlowBase_NOT_SOLVED_MinCostFlowBase() (_swig_ret Operations_researchMinCostFlowBaseStatus) {
	var swig_r Operations_researchMinCostFlowBaseStatus
	swig_r = (Operations_researchMinCostFlowBaseStatus)(C._wrap_NOT_SOLVED_MinCostFlowBase_gen_73eab090ea2eb3ea())
	return swig_r
}

var MinCostFlowBaseNOT_SOLVED Operations_researchMinCostFlowBaseStatus = _swig_getMinCostFlowBase_NOT_SOLVED_MinCostFlowBase()

func _swig_getMinCostFlowBase_OPTIMAL_MinCostFlowBase() (_swig_ret Operations_researchMinCostFlowBaseStatus) {
	var swig_r Operations_researchMinCostFlowBaseStatus
	swig_r = (Operations_researchMinCostFlowBaseStatus)(C._wrap_OPTIMAL_MinCostFlowBase_gen_73eab090ea2eb3ea())
	return swig_r
}

var MinCostFlowBaseOPTIMAL Operations_researchMinCostFlowBaseStatus = _swig_getMinCostFlowBase_OPTIMAL_MinCostFlowBase()

func _swig_getMinCostFlowBase_FEASIBLE_MinCostFlowBase() (_swig_ret Operations_researchMinCostFlowBaseStatus) {
	var swig_r Operations_researchMinCostFlowBaseStatus
	swig_r = (Operations_researchMinCostFlowBaseStatus)(C._wrap_FEASIBLE_MinCostFlowBase_gen_73eab090ea2eb3ea())
	return swig_r
}

var MinCostFlowBaseFEASIBLE Operations_researchMinCostFlowBaseStatus = _swig_getMinCostFlowBase_FEASIBLE_MinCostFlowBase()

func _swig_getMinCostFlowBase_INFEASIBLE_MinCostFlowBase() (_swig_ret Operations_researchMinCostFlowBaseStatus) {
	var swig_r Operations_researchMinCostFlowBaseStatus
	swig_r = (Operations_researchMinCostFlowBaseStatus)(C._wrap_INFEASIBLE_MinCostFlowBase_gen_73eab090ea2eb3ea())
	return swig_r
}

var MinCostFlowBaseINFEASIBLE Operations_researchMinCostFlowBaseStatus = _swig_getMinCostFlowBase_INFEASIBLE_MinCostFlowBase()

func _swig_getMinCostFlowBase_UNBALANCED_MinCostFlowBase() (_swig_ret Operations_researchMinCostFlowBaseStatus) {
	var swig_r Operations_researchMinCostFlowBaseStatus
	swig_r = (Operations_researchMinCostFlowBaseStatus)(C._wrap_UNBALANCED_MinCostFlowBase_gen_73eab090ea2eb3ea())
	return swig_r
}

var MinCostFlowBaseUNBALANCED Operations_researchMinCostFlowBaseStatus = _swig_getMinCostFlowBase_UNBALANCED_MinCostFlowBase()

func _swig_getMinCostFlowBase_BAD_RESULT_MinCostFlowBase() (_swig_ret Operations_researchMinCostFlowBaseStatus) {
	var swig_r Operations_researchMinCostFlowBaseStatus
	swig_r = (Operations_researchMinCostFlowBaseStatus)(C._wrap_BAD_RESULT_MinCostFlowBase_gen_73eab090ea2eb3ea())
	return swig_r
}

var MinCostFlowBaseBAD_RESULT Operations_researchMinCostFlowBaseStatus = _swig_getMinCostFlowBase_BAD_RESULT_MinCostFlowBase()

func _swig_getMinCostFlowBase_BAD_COST_RANGE_MinCostFlowBase() (_swig_ret Operations_researchMinCostFlowBaseStatus) {
	var swig_r Operations_researchMinCostFlowBaseStatus
	swig_r = (Operations_researchMinCostFlowBaseStatus)(C._wrap_BAD_COST_RANGE_MinCostFlowBase_gen_73eab090ea2eb3ea())
	return swig_r
}

var MinCostFlowBaseBAD_COST_RANGE Operations_researchMinCostFlowBaseStatus = _swig_getMinCostFlowBase_BAD_COST_RANGE_MinCostFlowBase()

func NewMinCostFlowBase() (_swig_ret MinCostFlowBase) {
	var swig_r MinCostFlowBase
	swig_r = (MinCostFlowBase)(SwigcptrMinCostFlowBase(C._wrap_new_MinCostFlowBase_gen_73eab090ea2eb3ea()))
	return swig_r
}

func DeleteMinCostFlowBase(arg1 MinCostFlowBase) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_MinCostFlowBase_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0))
}

type MinCostFlowBase interface {
	Swigcptr() uintptr
	SwigIsMinCostFlowBase()
}

type SwigcptrMinCostFlow uintptr

func (p SwigcptrMinCostFlow) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrMinCostFlow) SwigIsMinCostFlow() {
}

func NewMinCostFlow__SWIG_0(arg1 int, arg2 int) (_swig_ret MinCostFlow) {
	var swig_r MinCostFlow
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (MinCostFlow)(SwigcptrMinCostFlow(C._wrap_new_MinCostFlow__SWIG_0_gen_73eab090ea2eb3ea(C.swig_intgo(_swig_i_0), C.swig_intgo(_swig_i_1))))
	return swig_r
}

func NewMinCostFlow__SWIG_1(arg1 int) (_swig_ret MinCostFlow) {
	var swig_r MinCostFlow
	_swig_i_0 := arg1
	swig_r = (MinCostFlow)(SwigcptrMinCostFlow(C._wrap_new_MinCostFlow__SWIG_1_gen_73eab090ea2eb3ea(C.swig_intgo(_swig_i_0))))
	return swig_r
}

func NewMinCostFlow__SWIG_2() (_swig_ret MinCostFlow) {
	var swig_r MinCostFlow
	swig_r = (MinCostFlow)(SwigcptrMinCostFlow(C._wrap_new_MinCostFlow__SWIG_2_gen_73eab090ea2eb3ea()))
	return swig_r
}

func NewMinCostFlow(a ...interface{}) MinCostFlow {
	argc := len(a)
	if argc == 0 {
		return NewMinCostFlow__SWIG_2()
	}
	if argc == 1 {
		return NewMinCostFlow__SWIG_1(a[0].(int))
	}
	if argc == 2 {
		return NewMinCostFlow__SWIG_0(a[0].(int), a[1].(int))
	}
	panic("No match for overloaded function call")
}

func (arg1 SwigcptrMinCostFlow) AddArcWithCapacityAndUnitCost(arg2 int, arg3 int, arg4 int64, arg5 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_MinCostFlow_addArcWithCapacityAndUnitCost_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), C.swig_intgo(_swig_i_2), C.swig_type_6(_swig_i_3), C.swig_type_7(_swig_i_4)))
	return swig_r
}

func (arg1 SwigcptrMinCostFlow) SetNodeSupply(arg2 int, arg3 int64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	C._wrap_MinCostFlow_setNodeSupply_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), C.swig_type_8(_swig_i_2))
}

func (arg1 SwigcptrMinCostFlow) Solve() (_swig_ret Operations_researchMinCostFlowBaseStatus) {
	var swig_r Operations_researchMinCostFlowBaseStatus
	_swig_i_0 := arg1
	swig_r = (Operations_researchMinCostFlowBaseStatus)(C._wrap_MinCostFlow_solve_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrMinCostFlow) SolveMaxFlowWithMinCost() (_swig_ret Operations_researchMinCostFlowBaseStatus) {
	var swig_r Operations_researchMinCostFlowBaseStatus
	_swig_i_0 := arg1
	swig_r = (Operations_researchMinCostFlowBaseStatus)(C._wrap_MinCostFlow_solveMaxFlowWithMinCost_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrMinCostFlow) GetOptimalCost() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_MinCostFlow_getOptimalCost_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrMinCostFlow) GetMaximumFlow() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_MinCostFlow_getMaximumFlow_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrMinCostFlow) GetFlow(arg2 int) (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int64)(C._wrap_MinCostFlow_getFlow_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func (arg1 SwigcptrMinCostFlow) GetNumNodes() (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_MinCostFlow_getNumNodes_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrMinCostFlow) GetNumArcs() (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_MinCostFlow_getNumArcs_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrMinCostFlow) GetTail(arg2 int) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_MinCostFlow_getTail_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func (arg1 SwigcptrMinCostFlow) GetHead(arg2 int) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_MinCostFlow_getHead_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func (arg1 SwigcptrMinCostFlow) GetCapacity(arg2 int) (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int64)(C._wrap_MinCostFlow_getCapacity_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func (arg1 SwigcptrMinCostFlow) GetSupply(arg2 int) (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int64)(C._wrap_MinCostFlow_getSupply_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func (arg1 SwigcptrMinCostFlow) GetUnitCost(arg2 int) (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int64)(C._wrap_MinCostFlow_getUnitCost_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func DeleteMinCostFlow(arg1 MinCostFlow) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_MinCostFlow_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0))
}

func (p SwigcptrMinCostFlow) SwigIsMinCostFlowBase() {
}

func (p SwigcptrMinCostFlow) SwigGetMinCostFlowBase() MinCostFlowBase {
	return SwigcptrMinCostFlowBase(p.Swigcptr())
}

type MinCostFlow interface {
	Swigcptr() uintptr
	SwigIsMinCostFlow()
	AddArcWithCapacityAndUnitCost(arg2 int, arg3 int, arg4 int64, arg5 int64) (_swig_ret int)
	SetNodeSupply(arg2 int, arg3 int64)
	Solve() (_swig_ret Operations_researchMinCostFlowBaseStatus)
	SolveMaxFlowWithMinCost() (_swig_ret Operations_researchMinCostFlowBaseStatus)
	GetOptimalCost() (_swig_ret int64)
	GetMaximumFlow() (_swig_ret int64)
	GetFlow(arg2 int) (_swig_ret int64)
	GetNumNodes() (_swig_ret int)
	GetNumArcs() (_swig_ret int)
	GetTail(arg2 int) (_swig_ret int)
	GetHead(arg2 int) (_swig_ret int)
	GetCapacity(arg2 int) (_swig_ret int64)
	GetSupply(arg2 int) (_swig_ret int64)
	GetUnitCost(arg2 int) (_swig_ret int64)
	SwigIsMinCostFlowBase()
	SwigGetMinCostFlowBase() MinCostFlowBase
}

type SwigcptrLinearSumAssignment uintptr

func (p SwigcptrLinearSumAssignment) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrLinearSumAssignment) SwigIsLinearSumAssignment() {
}

func NewLinearSumAssignment() (_swig_ret LinearSumAssignment) {
	var swig_r LinearSumAssignment
	swig_r = (LinearSumAssignment)(SwigcptrLinearSumAssignment(C._wrap_new_LinearSumAssignment_gen_73eab090ea2eb3ea()))
	return swig_r
}

func (arg1 SwigcptrLinearSumAssignment) AddArcWithCost(arg2 int, arg3 int, arg4 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_LinearSumAssignment_addArcWithCost_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), C.swig_intgo(_swig_i_2), C.swig_type_15(_swig_i_3)))
	return swig_r
}

func (arg1 SwigcptrLinearSumAssignment) GetNumNodes() (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_LinearSumAssignment_getNumNodes_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrLinearSumAssignment) GetNumArcs() (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_LinearSumAssignment_getNumArcs_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrLinearSumAssignment) GetLeftNode(arg2 int) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_LinearSumAssignment_getLeftNode_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func (arg1 SwigcptrLinearSumAssignment) GetRightNode(arg2 int) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_LinearSumAssignment_getRightNode_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func (arg1 SwigcptrLinearSumAssignment) GetCost(arg2 int) (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int64)(C._wrap_LinearSumAssignment_getCost_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

type Operations_researchSimpleLinearSumAssignmentStatus int

func _swig_getLinearSumAssignment_OPTIMAL_LinearSumAssignment() (_swig_ret Operations_researchSimpleLinearSumAssignmentStatus) {
	var swig_r Operations_researchSimpleLinearSumAssignmentStatus
	swig_r = (Operations_researchSimpleLinearSumAssignmentStatus)(C._wrap_OPTIMAL_LinearSumAssignment_gen_73eab090ea2eb3ea())
	return swig_r
}

var LinearSumAssignmentOPTIMAL Operations_researchSimpleLinearSumAssignmentStatus = _swig_getLinearSumAssignment_OPTIMAL_LinearSumAssignment()

func _swig_getLinearSumAssignment_INFEASIBLE_LinearSumAssignment() (_swig_ret Operations_researchSimpleLinearSumAssignmentStatus) {
	var swig_r Operations_researchSimpleLinearSumAssignmentStatus
	swig_r = (Operations_researchSimpleLinearSumAssignmentStatus)(C._wrap_INFEASIBLE_LinearSumAssignment_gen_73eab090ea2eb3ea())
	return swig_r
}

var LinearSumAssignmentINFEASIBLE Operations_researchSimpleLinearSumAssignmentStatus = _swig_getLinearSumAssignment_INFEASIBLE_LinearSumAssignment()

func _swig_getLinearSumAssignment_POSSIBLE_OVERFLOW_LinearSumAssignment() (_swig_ret Operations_researchSimpleLinearSumAssignmentStatus) {
	var swig_r Operations_researchSimpleLinearSumAssignmentStatus
	swig_r = (Operations_researchSimpleLinearSumAssignmentStatus)(C._wrap_POSSIBLE_OVERFLOW_LinearSumAssignment_gen_73eab090ea2eb3ea())
	return swig_r
}

var LinearSumAssignmentPOSSIBLE_OVERFLOW Operations_researchSimpleLinearSumAssignmentStatus = _swig_getLinearSumAssignment_POSSIBLE_OVERFLOW_LinearSumAssignment()

func (arg1 SwigcptrLinearSumAssignment) Solve() (_swig_ret Operations_researchSimpleLinearSumAssignmentStatus) {
	var swig_r Operations_researchSimpleLinearSumAssignmentStatus
	_swig_i_0 := arg1
	swig_r = (Operations_researchSimpleLinearSumAssignmentStatus)(C._wrap_LinearSumAssignment_solve_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrLinearSumAssignment) GetOptimalCost() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_LinearSumAssignment_getOptimalCost_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrLinearSumAssignment) GetRightMate(arg2 int) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_LinearSumAssignment_getRightMate_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func (arg1 SwigcptrLinearSumAssignment) GetAssignmentCost(arg2 int) (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int64)(C._wrap_LinearSumAssignment_getAssignmentCost_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func DeleteLinearSumAssignment(arg1 LinearSumAssignment) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_LinearSumAssignment_gen_73eab090ea2eb3ea(C.uintptr_t(_swig_i_0))
}

type LinearSumAssignment interface {
	Swigcptr() uintptr
	SwigIsLinearSumAssignment()
	AddArcWithCost(arg2 int, arg3 int, arg4 int64) (_swig_ret int)
	GetNumNodes() (_swig_ret int)
	GetNumArcs() (_swig_ret int)
	GetLeftNode(arg2 int) (_swig_ret int)
	GetRightNode(arg2 int) (_swig_ret int)
	GetCost(arg2 int) (_swig_ret int64)
	Solve() (_swig_ret Operations_researchSimpleLinearSumAssignmentStatus)
	GetOptimalCost() (_swig_ret int64)
	GetRightMate(arg2 int) (_swig_ret int)
	GetAssignmentCost(arg2 int) (_swig_ret int64)
}
